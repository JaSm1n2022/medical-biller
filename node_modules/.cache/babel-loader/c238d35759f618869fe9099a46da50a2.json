{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _classCallCheck from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport crossFetch from 'cross-fetch';\nvar PostgrestBuilder = /*#__PURE__*/function () {\n  function PostgrestBuilder(builder) {\n    _classCallCheck(this, PostgrestBuilder);\n    this.shouldThrowOnError = false;\n    this.method = builder.method;\n    this.url = builder.url;\n    this.headers = builder.headers;\n    this.schema = builder.schema;\n    this.body = builder.body;\n    this.shouldThrowOnError = builder.shouldThrowOnError;\n    this.signal = builder.signal;\n    this.allowEmpty = builder.allowEmpty;\n    if (builder.fetch) {\n      this.fetch = builder.fetch;\n    } else if (typeof fetch === 'undefined') {\n      this.fetch = crossFetch;\n    } else {\n      this.fetch = fetch;\n    }\n  }\n  /**\n   * If there's an error with the query, throwOnError will reject the promise by\n   * throwing the error instead of returning it as part of a successful response.\n   *\n   * {@link https://github.com/supabase/supabase-js/issues/92}\n   */\n  _createClass(PostgrestBuilder, [{\n    key: \"throwOnError\",\n    value: function throwOnError() {\n      this.shouldThrowOnError = true;\n      return this;\n    }\n  }, {\n    key: \"then\",\n    value: function then(onfulfilled, onrejected) {\n      var _this = this;\n      // https://postgrest.org/en/stable/api.html#switching-schemas\n      if (this.schema === undefined) {\n        // skip\n      } else if (['GET', 'HEAD'].includes(this.method)) {\n        this.headers['Accept-Profile'] = this.schema;\n      } else {\n        this.headers['Content-Profile'] = this.schema;\n      }\n      if (this.method !== 'GET' && this.method !== 'HEAD') {\n        this.headers['Content-Type'] = 'application/json';\n      }\n      // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n      // https://github.com/supabase/postgrest-js/pull/247\n      var _fetch = this.fetch;\n      var res = _fetch(this.url.toString(), {\n        method: this.method,\n        headers: this.headers,\n        body: JSON.stringify(this.body),\n        signal: this.signal\n      }).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(res) {\n          var _a, _b, _c, error, data, count, status, statusText, body, countHeader, contentRange, _body, postgrestResponse;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                error = null;\n                data = null;\n                count = null;\n                status = res.status;\n                statusText = res.statusText;\n                if (!res.ok) {\n                  _context.next = 16;\n                  break;\n                }\n                if (!(_this.method !== 'HEAD')) {\n                  _context.next = 11;\n                  break;\n                }\n                _context.next = 9;\n                return res.text();\n              case 9:\n                body = _context.sent;\n                if (body === '') {\n                  // Prefer: return=minimal\n                } else if (_this.headers['Accept'] === 'text/csv') {\n                  data = body;\n                } else if (_this.headers['Accept'] && _this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                  data = body;\n                } else {\n                  data = JSON.parse(body);\n                }\n              case 11:\n                countHeader = (_a = _this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                  count = parseInt(contentRange[1]);\n                }\n                _context.next = 23;\n                break;\n              case 16:\n                _context.next = 18;\n                return res.text();\n              case 18:\n                _body = _context.sent;\n                try {\n                  error = JSON.parse(_body);\n                  // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                  if (Array.isArray(error) && res.status === 404) {\n                    data = [];\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                  }\n                } catch (_d) {\n                  // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                  if (res.status === 404 && _body === '') {\n                    status = 204;\n                    statusText = 'No Content';\n                  } else {\n                    error = {\n                      message: _body\n                    };\n                  }\n                }\n                if (error && _this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n                  error = null;\n                  status = 200;\n                  statusText = 'OK';\n                }\n                if (!(error && _this.shouldThrowOnError)) {\n                  _context.next = 23;\n                  break;\n                }\n                throw error;\n              case 23:\n                postgrestResponse = {\n                  error: error,\n                  data: data,\n                  count: count,\n                  status: status,\n                  statusText: statusText\n                };\n                return _context.abrupt(\"return\", postgrestResponse);\n              case 25:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee);\n        }));\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n      if (!this.shouldThrowOnError) {\n        res = res[\"catch\"](function (fetchError) {\n          var _a, _b, _c;\n          return {\n            error: {\n              message: \"\".concat((_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError', \": \").concat(fetchError === null || fetchError === void 0 ? void 0 : fetchError.message),\n              details: \"\".concat((_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''),\n              hint: '',\n              code: \"\".concat((_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : '')\n            },\n            data: null,\n            count: null,\n            status: 0,\n            statusText: ''\n          };\n        });\n      }\n      return res.then(onfulfilled, onrejected);\n    }\n  }]);\n  return PostgrestBuilder;\n}();\nexport { PostgrestBuilder as default };","map":{"version":3,"sources":["../../src/PostgrestBuilder.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import crossFetch from 'cross-fetch';\nexport default class PostgrestBuilder {\n    constructor(builder) {\n        this.shouldThrowOnError = false;\n        this.method = builder.method;\n        this.url = builder.url;\n        this.headers = builder.headers;\n        this.schema = builder.schema;\n        this.body = builder.body;\n        this.shouldThrowOnError = builder.shouldThrowOnError;\n        this.signal = builder.signal;\n        this.allowEmpty = builder.allowEmpty;\n        if (builder.fetch) {\n            this.fetch = builder.fetch;\n        }\n        else if (typeof fetch === 'undefined') {\n            this.fetch = crossFetch;\n        }\n        else {\n            this.fetch = fetch;\n        }\n    }\n    /**\n     * If there's an error with the query, throwOnError will reject the promise by\n     * throwing the error instead of returning it as part of a successful response.\n     *\n     * {@link https://github.com/supabase/supabase-js/issues/92}\n     */\n    throwOnError() {\n        this.shouldThrowOnError = true;\n        return this;\n    }\n    then(onfulfilled, onrejected) {\n        // https://postgrest.org/en/stable/api.html#switching-schemas\n        if (this.schema === undefined) {\n            // skip\n        }\n        else if (['GET', 'HEAD'].includes(this.method)) {\n            this.headers['Accept-Profile'] = this.schema;\n        }\n        else {\n            this.headers['Content-Profile'] = this.schema;\n        }\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\n            this.headers['Content-Type'] = 'application/json';\n        }\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\n        // https://github.com/supabase/postgrest-js/pull/247\n        const _fetch = this.fetch;\n        let res = _fetch(this.url.toString(), {\n            method: this.method,\n            headers: this.headers,\n            body: JSON.stringify(this.body),\n            signal: this.signal,\n        }).then(async (res) => {\n            var _a, _b, _c;\n            let error = null;\n            let data = null;\n            let count = null;\n            let status = res.status;\n            let statusText = res.statusText;\n            if (res.ok) {\n                if (this.method !== 'HEAD') {\n                    const body = await res.text();\n                    if (body === '') {\n                        // Prefer: return=minimal\n                    }\n                    else if (this.headers['Accept'] === 'text/csv') {\n                        data = body;\n                    }\n                    else if (this.headers['Accept'] &&\n                        this.headers['Accept'].includes('application/vnd.pgrst.plan+text')) {\n                        data = body;\n                    }\n                    else {\n                        data = JSON.parse(body);\n                    }\n                }\n                const countHeader = (_a = this.headers['Prefer']) === null || _a === void 0 ? void 0 : _a.match(/count=(exact|planned|estimated)/);\n                const contentRange = (_b = res.headers.get('content-range')) === null || _b === void 0 ? void 0 : _b.split('/');\n                if (countHeader && contentRange && contentRange.length > 1) {\n                    count = parseInt(contentRange[1]);\n                }\n            }\n            else {\n                const body = await res.text();\n                try {\n                    error = JSON.parse(body);\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (Array.isArray(error) && res.status === 404) {\n                        data = [];\n                        error = null;\n                        status = 200;\n                        statusText = 'OK';\n                    }\n                }\n                catch (_d) {\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\n                    if (res.status === 404 && body === '') {\n                        status = 204;\n                        statusText = 'No Content';\n                    }\n                    else {\n                        error = {\n                            message: body,\n                        };\n                    }\n                }\n                if (error && this.allowEmpty && ((_c = error === null || error === void 0 ? void 0 : error.details) === null || _c === void 0 ? void 0 : _c.includes('Results contain 0 rows'))) {\n                    error = null;\n                    status = 200;\n                    statusText = 'OK';\n                }\n                if (error && this.shouldThrowOnError) {\n                    throw error;\n                }\n            }\n            const postgrestResponse = {\n                error,\n                data,\n                count,\n                status,\n                statusText,\n            };\n            return postgrestResponse;\n        });\n        if (!this.shouldThrowOnError) {\n            res = res.catch((fetchError) => {\n                var _a, _b, _c;\n                return ({\n                    error: {\n                        message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\n                        details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\n                        hint: '',\n                        code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`,\n                    },\n                    data: null,\n                    count: null,\n                    status: 0,\n                    statusText: '',\n                });\n            });\n        }\n        return res.then(onfulfilled, onrejected);\n    }\n}\n//# sourceMappingURL=PostgrestBuilder.js.map"]},"metadata":{},"sourceType":"module"}