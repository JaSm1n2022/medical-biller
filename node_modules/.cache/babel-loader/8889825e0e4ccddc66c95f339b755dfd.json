{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient } from '@supabase/postgrest-js';\nimport { RealtimeClient } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nvar DEFAULT_GLOBAL_OPTIONS = {\n  headers: DEFAULT_HEADERS\n};\nvar DEFAULT_DB_OPTIONS = {\n  schema: 'public'\n};\nvar DEFAULT_AUTH_OPTIONS = {\n  autoRefreshToken: true,\n  persistSession: true,\n  detectSessionInUrl: true,\n  flowType: 'implicit'\n};\nvar DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nvar SupabaseClient = /*#__PURE__*/function () {\n  /**\n   * Create a new client for use in the browser.\n   * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n   * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n   * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n   * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n   * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n   * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n   * @param options.realtime Options passed along to realtime-js constructor.\n   * @param options.global.fetch A custom fetch implementation.\n   * @param options.global.headers Any additional headers to send with each network request.\n   */\n  function SupabaseClient(supabaseUrl, supabaseKey, options) {\n    _classCallCheck(this, SupabaseClient);\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.supabaseUrl = supabaseUrl;\n    this.supabaseKey = supabaseKey;\n    if (!supabaseUrl) throw new Error('supabaseUrl is required.');\n    if (!supabaseKey) throw new Error('supabaseKey is required.');\n    var _supabaseUrl = stripTrailingSlash(supabaseUrl);\n    this.realtimeUrl = \"\".concat(_supabaseUrl, \"/realtime/v1\").replace(/^http/i, 'ws');\n    this.authUrl = \"\".concat(_supabaseUrl, \"/auth/v1\");\n    this.storageUrl = \"\".concat(_supabaseUrl, \"/storage/v1\");\n    var isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n    if (isPlatform) {\n      var urlParts = _supabaseUrl.split('.');\n      this.functionsUrl = \"\".concat(urlParts[0], \".functions.\").concat(urlParts[1], \".\").concat(urlParts[2]);\n    } else {\n      this.functionsUrl = \"\".concat(_supabaseUrl, \"/functions/v1\");\n    }\n    // default storage key uses the supabase project ref as a namespace\n    var defaultStorageKey = \"sb-\".concat(new URL(this.authUrl).hostname.split('.')[0], \"-auth-token\");\n    var DEFAULTS = {\n      db: DEFAULT_DB_OPTIONS,\n      realtime: DEFAULT_REALTIME_OPTIONS,\n      auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), {\n        storageKey: defaultStorageKey\n      }),\n      global: DEFAULT_GLOBAL_OPTIONS\n    };\n    var settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n    this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n    this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n    this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n    this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n    this.realtime = this._initRealtimeClient(Object.assign({\n      headers: this.headers\n    }, settings.realtime));\n    this.rest = new PostgrestClient(\"\".concat(_supabaseUrl, \"/rest/v1\"), {\n      headers: this.headers,\n      schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n      fetch: this.fetch\n    });\n    this._listenForAuthEvents();\n  }\n  /**\n   * Supabase Functions allows you to deploy and invoke edge functions.\n   */\n  _createClass(SupabaseClient, [{\n    key: \"functions\",\n    get: function get() {\n      return new FunctionsClient(this.functionsUrl, {\n        headers: this.headers,\n        customFetch: this.fetch\n      });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n  }, {\n    key: \"storage\",\n    get: function get() {\n      return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n  }, {\n    key: \"from\",\n    value: function from(relation) {\n      return this.rest.from(relation);\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param args  The parameters to pass to the function call.\n     * @param options.head   When set to true, no data will be returned.\n     * @param options.count  Count algorithm to use to count rows in a table.\n     *\n     */\n  }, {\n    key: \"rpc\",\n    value: function rpc(fn) {\n      var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var options = arguments.length > 2 ? arguments[2] : undefined;\n      return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n  }, {\n    key: \"channel\",\n    value: function channel(name) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        config: {}\n      };\n      return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n  }, {\n    key: \"getChannels\",\n    value: function getChannels() {\n      return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n  }, {\n    key: \"removeChannel\",\n    value: function removeChannel(channel) {\n      return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n  }, {\n    key: \"removeAllChannels\",\n    value: function removeAllChannels() {\n      return this.realtime.removeAllChannels();\n    }\n  }, {\n    key: \"_getAccessToken\",\n    value: function _getAccessToken() {\n      var _a, _b;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _yield$this$auth$getS, data;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.auth.getSession();\n            case 2:\n              _yield$this$auth$getS = _context.sent;\n              data = _yield$this$auth$getS.data;\n              return _context.abrupt(\"return\", (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null);\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_initSupabaseAuthClient\",\n    value: function _initSupabaseAuthClient(_ref, headers, fetch) {\n      var autoRefreshToken = _ref.autoRefreshToken,\n        persistSession = _ref.persistSession,\n        detectSessionInUrl = _ref.detectSessionInUrl,\n        storage = _ref.storage,\n        storageKey = _ref.storageKey,\n        flowType = _ref.flowType;\n      var authHeaders = {\n        Authorization: \"Bearer \".concat(this.supabaseKey),\n        apikey: \"\".concat(this.supabaseKey)\n      };\n      return new SupabaseAuthClient({\n        url: this.authUrl,\n        headers: Object.assign(Object.assign({}, authHeaders), headers),\n        storageKey: storageKey,\n        autoRefreshToken: autoRefreshToken,\n        persistSession: persistSession,\n        detectSessionInUrl: detectSessionInUrl,\n        storage: storage,\n        flowType: flowType,\n        fetch: fetch\n      });\n    }\n  }, {\n    key: \"_initRealtimeClient\",\n    value: function _initRealtimeClient(options) {\n      return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), {\n        params: Object.assign({\n          apikey: this.supabaseKey\n        }, options === null || options === void 0 ? void 0 : options.params)\n      }));\n    }\n  }, {\n    key: \"_listenForAuthEvents\",\n    value: function _listenForAuthEvents() {\n      var _this = this;\n      var data = this.auth.onAuthStateChange(function (event, session) {\n        _this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n      });\n      return data;\n    }\n  }, {\n    key: \"_handleTokenChanged\",\n    value: function _handleTokenChanged(event, token, source) {\n      if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') && this.changedAccessToken !== token) {\n        // Token has changed\n        this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n        this.changedAccessToken = token;\n      } else if (event === 'SIGNED_OUT') {\n        // Token is removed\n        this.realtime.setAuth(this.supabaseKey);\n        if (source == 'STORAGE') this.auth.signOut();\n        this.changedAccessToken = undefined;\n      }\n    }\n  }]);\n  return SupabaseClient;\n}();\nexport { SupabaseClient as default };","map":{"version":3,"sources":["../../src/SupabaseClient.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FunctionsClient } from '@supabase/functions-js';\nimport { PostgrestClient, } from '@supabase/postgrest-js';\nimport { RealtimeClient, } from '@supabase/realtime-js';\nimport { StorageClient as SupabaseStorageClient } from '@supabase/storage-js';\nimport { DEFAULT_HEADERS } from './lib/constants';\nimport { fetchWithAuth } from './lib/fetch';\nimport { stripTrailingSlash, applySettingDefaults } from './lib/helpers';\nimport { SupabaseAuthClient } from './lib/SupabaseAuthClient';\nconst DEFAULT_GLOBAL_OPTIONS = {\n    headers: DEFAULT_HEADERS,\n};\nconst DEFAULT_DB_OPTIONS = {\n    schema: 'public',\n};\nconst DEFAULT_AUTH_OPTIONS = {\n    autoRefreshToken: true,\n    persistSession: true,\n    detectSessionInUrl: true,\n    flowType: 'implicit',\n};\nconst DEFAULT_REALTIME_OPTIONS = {};\n/**\n * Supabase Client.\n *\n * An isomorphic Javascript client for interacting with Postgres.\n */\nexport default class SupabaseClient {\n    /**\n     * Create a new client for use in the browser.\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\n     * @param options.realtime Options passed along to realtime-js constructor.\n     * @param options.global.fetch A custom fetch implementation.\n     * @param options.global.headers Any additional headers to send with each network request.\n     */\n    constructor(supabaseUrl, supabaseKey, options) {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        this.supabaseUrl = supabaseUrl;\n        this.supabaseKey = supabaseKey;\n        if (!supabaseUrl)\n            throw new Error('supabaseUrl is required.');\n        if (!supabaseKey)\n            throw new Error('supabaseKey is required.');\n        const _supabaseUrl = stripTrailingSlash(supabaseUrl);\n        this.realtimeUrl = `${_supabaseUrl}/realtime/v1`.replace(/^http/i, 'ws');\n        this.authUrl = `${_supabaseUrl}/auth/v1`;\n        this.storageUrl = `${_supabaseUrl}/storage/v1`;\n        const isPlatform = _supabaseUrl.match(/(supabase\\.co)|(supabase\\.in)/);\n        if (isPlatform) {\n            const urlParts = _supabaseUrl.split('.');\n            this.functionsUrl = `${urlParts[0]}.functions.${urlParts[1]}.${urlParts[2]}`;\n        }\n        else {\n            this.functionsUrl = `${_supabaseUrl}/functions/v1`;\n        }\n        // default storage key uses the supabase project ref as a namespace\n        const defaultStorageKey = `sb-${new URL(this.authUrl).hostname.split('.')[0]}-auth-token`;\n        const DEFAULTS = {\n            db: DEFAULT_DB_OPTIONS,\n            realtime: DEFAULT_REALTIME_OPTIONS,\n            auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\n            global: DEFAULT_GLOBAL_OPTIONS,\n        };\n        const settings = applySettingDefaults(options !== null && options !== void 0 ? options : {}, DEFAULTS);\n        this.storageKey = (_b = (_a = settings.auth) === null || _a === void 0 ? void 0 : _a.storageKey) !== null && _b !== void 0 ? _b : '';\n        this.headers = (_d = (_c = settings.global) === null || _c === void 0 ? void 0 : _c.headers) !== null && _d !== void 0 ? _d : {};\n        this.auth = this._initSupabaseAuthClient((_e = settings.auth) !== null && _e !== void 0 ? _e : {}, this.headers, (_f = settings.global) === null || _f === void 0 ? void 0 : _f.fetch);\n        this.fetch = fetchWithAuth(supabaseKey, this._getAccessToken.bind(this), (_g = settings.global) === null || _g === void 0 ? void 0 : _g.fetch);\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers }, settings.realtime));\n        this.rest = new PostgrestClient(`${_supabaseUrl}/rest/v1`, {\n            headers: this.headers,\n            schema: (_h = settings.db) === null || _h === void 0 ? void 0 : _h.schema,\n            fetch: this.fetch,\n        });\n        this._listenForAuthEvents();\n    }\n    /**\n     * Supabase Functions allows you to deploy and invoke edge functions.\n     */\n    get functions() {\n        return new FunctionsClient(this.functionsUrl, {\n            headers: this.headers,\n            customFetch: this.fetch,\n        });\n    }\n    /**\n     * Supabase Storage allows you to manage user-generated content, such as photos or videos.\n     */\n    get storage() {\n        return new SupabaseStorageClient(this.storageUrl, this.headers, this.fetch);\n    }\n    from(relation) {\n        return this.rest.from(relation);\n    }\n    /**\n     * Perform a function call.\n     *\n     * @param fn  The function name to call.\n     * @param args  The parameters to pass to the function call.\n     * @param options.head   When set to true, no data will be returned.\n     * @param options.count  Count algorithm to use to count rows in a table.\n     *\n     */\n    rpc(fn, args = {}, options) {\n        return this.rest.rpc(fn, args, options);\n    }\n    /**\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\n     *\n     * @param {string} name - The name of the Realtime channel.\n     * @param {Object} opts - The options to pass to the Realtime channel.\n     *\n     */\n    channel(name, opts = { config: {} }) {\n        return this.realtime.channel(name, opts);\n    }\n    /**\n     * Returns all Realtime channels.\n     */\n    getChannels() {\n        return this.realtime.getChannels();\n    }\n    /**\n     * Unsubscribes and removes Realtime channel from Realtime client.\n     *\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\n     *\n     */\n    removeChannel(channel) {\n        return this.realtime.removeChannel(channel);\n    }\n    /**\n     * Unsubscribes and removes all Realtime channels from Realtime client.\n     */\n    removeAllChannels() {\n        return this.realtime.removeAllChannels();\n    }\n    _getAccessToken() {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data } = yield this.auth.getSession();\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : null;\n        });\n    }\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, storageKey, flowType, }, headers, fetch) {\n        const authHeaders = {\n            Authorization: `Bearer ${this.supabaseKey}`,\n            apikey: `${this.supabaseKey}`,\n        };\n        return new SupabaseAuthClient({\n            url: this.authUrl,\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\n            storageKey: storageKey,\n            autoRefreshToken,\n            persistSession,\n            detectSessionInUrl,\n            storage,\n            flowType,\n            fetch,\n        });\n    }\n    _initRealtimeClient(options) {\n        return new RealtimeClient(this.realtimeUrl, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\n    }\n    _listenForAuthEvents() {\n        let data = this.auth.onAuthStateChange((event, session) => {\n            this._handleTokenChanged(event, session === null || session === void 0 ? void 0 : session.access_token, 'CLIENT');\n        });\n        return data;\n    }\n    _handleTokenChanged(event, token, source) {\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\n            this.changedAccessToken !== token) {\n            // Token has changed\n            this.realtime.setAuth(token !== null && token !== void 0 ? token : null);\n            this.changedAccessToken = token;\n        }\n        else if (event === 'SIGNED_OUT') {\n            // Token is removed\n            this.realtime.setAuth(this.supabaseKey);\n            if (source == 'STORAGE')\n                this.auth.signOut();\n            this.changedAccessToken = undefined;\n        }\n    }\n}\n//# sourceMappingURL=SupabaseClient.js.map"]},"metadata":{},"sourceType":"module"}