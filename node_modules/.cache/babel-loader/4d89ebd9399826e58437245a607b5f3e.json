{"ast":null,"code":"import _toConsumableArray from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _objectSpread from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport _slicedToArray from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar _jsxFileName = \"/Users/nargelmac/Documents/GitHub/medical-biller/src/views/Claim/Medicaid/MedicaidFunction.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n// core components\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport MedicaidHandler from \"./handler/MedicaidHandler\";\nimport { connect } from \"react-redux\";\nimport ActionsFunction from \"components/Actions/ActionsFunction\";\nimport { ACTION_STATUSES } from \"utils/constants\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport HospiceTable from \"components/Table/HospiceTable\";\nimport { ImportExport } from \"@material-ui/icons\";\nimport Helper from \"utils/helper\";\nimport * as FileSaver from \"file-saver\";\nimport MedicaidForm from \"./components/MedicaidForm\";\nimport { attemptToUpdateClaim } from \"store/actions/claimAction\";\nimport TOAST from \"modules/toastManager\";\nimport { claimListStateSelector } from \"store/selectors/claimSelector\";\nimport { claimCreateStateSelector } from \"store/selectors/claimSelector\";\nimport { claimUpdateStateSelector } from \"store/selectors/claimSelector\";\nimport { claimDeleteStateSelector } from \"store/selectors/claimSelector\";\nimport { attemptToFetchClaim } from \"store/actions/claimAction\";\nimport { resetFetchClaimState } from \"store/actions/claimAction\";\nimport { attemptToCreateClaim } from \"store/actions/claimAction\";\nimport { resetCreateClaimState } from \"store/actions/claimAction\";\nimport { resetUpdateClaimState } from \"store/actions/claimAction\";\nimport { attemptToDeleteClaim } from \"store/actions/claimAction\";\nimport { resetDeleteClaimState } from \"store/actions/claimAction\";\nimport FilterTable from \"components/Table/FilterTable\";\nimport { profileListStateSelector } from \"store/selectors/profileSelector\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar styles = {\n  cardCategoryWhite: {\n    \"&,& a,& a:hover,& a:focus\": {\n      color: \"rgba(255,255,255,.62)\",\n      margin: \"0\",\n      fontSize: \"14px\",\n      marginTop: \"0\",\n      marginBottom: \"0\"\n    },\n    \"& a,& a:hover,& a:focus\": {\n      color: \"#FFFFFF\"\n    }\n  },\n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    marginTop: \"0px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: \"3px\",\n    textDecoration: \"none\",\n    \"& small\": {\n      color: \"#777\",\n      fontSize: \"65%\",\n      fontWeight: \"400\",\n      lineHeight: \"1\"\n    }\n  }\n};\nvar useStyles = makeStyles(styles);\nvar productList = [];\nvar grandTotal = 0.0;\nvar originalSource = undefined;\nvar locationList = [];\nvar userProfile = {};\nfunction MedicaidFunction(props) {\n  _s();\n  var _this = this;\n  var classes = useStyles();\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    dataSource = _useState2[0],\n    setDataSource = _useState2[1];\n  var _useState3 = useState(MedicaidHandler.columns(true)),\n    _useState4 = _slicedToArray(_useState3, 2),\n    columns = _useState4[0],\n    setColumns = _useState4[1];\n  var _useState5 = useState(true),\n    _useState6 = _slicedToArray(_useState5, 2),\n    isClaimsCollection = _useState6[0],\n    setIsClaimsCollection = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    isCreateClaimCollection = _useState8[0],\n    setIsCreateClaimCollection = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isUpdateClaimCollection = _useState10[0],\n    setIsUpdateClaimCollection = _useState10[1];\n  var _useState11 = useState(true),\n    _useState12 = _slicedToArray(_useState11, 2),\n    isDeleteClaimCollection = _useState12[0],\n    setIsDeleteClaimCollection = _useState12[1];\n  var _useState13 = useState(false),\n    _useState14 = _slicedToArray(_useState13, 2),\n    isFormModal = _useState14[0],\n    setIsFormModal = _useState14[1];\n  var _useState15 = useState(undefined),\n    _useState16 = _slicedToArray(_useState15, 2),\n    item = _useState16[0],\n    setItem = _useState16[1];\n  var _useState17 = useState(\"create\"),\n    _useState18 = _slicedToArray(_useState17, 2),\n    mode = _useState18[0],\n    setMode = _useState18[1];\n  var _useState19 = useState(false),\n    _useState20 = _slicedToArray(_useState19, 2),\n    isAddGroupButtons = _useState20[0],\n    setIsAddGroupButtons = _useState20[1];\n  var createFormHandler = function createFormHandler(data, mode) {\n    setItem(data);\n    setMode(mode || \"create\");\n    setIsFormModal(true);\n  };\n  var closeFormModalHandler = function closeFormModalHandler() {\n    setIsFormModal(false);\n  };\n  useEffect(function () {\n    if (!isClaimsCollection && props.claims && props.claims.status === ACTION_STATUSES.SUCCEED) {\n      props.resetListClaims();\n      setIsClaimsCollection(true);\n    }\n    if (!isCreateClaimCollection && props.createClaimState && props.createClaimState.status === ACTION_STATUSES.SUCCEED) {\n      props.resetCreateClaim();\n      setIsCreateClaimCollection(true);\n    }\n    if (!isUpdateClaimCollection && props.updateClaimState && props.updateClaimState.status === ACTION_STATUSES.SUCCEED) {\n      props.resetUpdateClaim();\n      setIsUpdateClaimCollection(true);\n    }\n    if (!isDeleteClaimCollection && props.deleteClaimState && props.deleteClaimState.status === ACTION_STATUSES.SUCCEED) {\n      console.log(\"[change me to true]\");\n      props.resetDeleteClaim();\n      setIsDeleteClaimCollection(true);\n    }\n  }, [isDeleteClaimCollection, isUpdateClaimCollection, isCreateClaimCollection, isClaimsCollection]);\n  useEffect(function () {\n    console.log(\"list Claims\", props.profileState);\n    if (props.profileState && props.profileState.data && props.profileState.data.length) {\n      userProfile = props.profileState.data[0];\n      props.listClaims({\n        companyId: userProfile.companyId\n      });\n    }\n  }, []);\n  if (isClaimsCollection && props.claims && props.claims.status === ACTION_STATUSES.SUCCEED) {\n    grandTotal = 0.0;\n    var source = props.claims.data;\n    if (source && source.length) {\n      source = MedicaidHandler.mapData(source, productList);\n    }\n    var cols = MedicaidHandler.columns(true).map(function (col, index) {\n      if (col.name === \"actions\") {\n        return _objectSpread(_objectSpread({}, col), {}, {\n          editable: function editable() {\n            return false;\n          },\n          render: function render(cellProps) {\n            return /*#__PURE__*/_jsxDEV(ActionsFunction, {\n              deleteRecordItemHandler: deleteRecordItemHandler,\n              createFormHandler: createFormHandler,\n              data: _objectSpread({}, cellProps.data)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 13\n            }, _this);\n          }\n        });\n      } else {\n        return _objectSpread(_objectSpread({}, col), {}, {\n          editable: function editable() {\n            return false;\n          }\n        });\n      }\n    });\n    setColumns(cols);\n    originalSource = _toConsumableArray(source);\n    setDataSource(source);\n    setIsClaimsCollection(false);\n  }\n  var deleteRecordItemHandler = function deleteRecordItemHandler(id) {\n    console.log(\"[delete Claim id]\", id);\n    props.deleteClaim(id);\n  };\n  var createClaimHandler = function createClaimHandler(general, details, mode) {\n    console.log(\"[Create Claim Handler]\", general, mode, userProfile);\n    /*\n    const finalPayload = [];\n    for (const payload of details) {\n    \n    const params = {\n      code: payload.code,\n      description: payload.description,\n      unit: payload.unit,\n      rate: payload.rate,\n      provider: payload?.provider,\n      companyId: userProfile.companyId,\n      updatedUser: {\n        name: userProfile.name,\n        userId: userProfile.id,\n        date: new Date(),\n      },\n    };\n     if (mode === \"create\") {\n      params.createdUser = {\n        name: userProfile.name,\n        userId: userProfile.companyId,\n        date: new Date(),\n      };\n      props.createClaim(params);\n    } else if (mode === \"edit\") {\n      params.id = payload.id;\n      props.updateClaim(params);\n    }\n    closeFormModalHandler();\n    */\n  };\n\n  console.log(\"[Is Create Claim Collection]\", props.createClaimState);\n  if (isCreateClaimCollection && props.createClaimState && props.createClaimState.status === ACTION_STATUSES.SUCCEED) {\n    setIsCreateClaimCollection(false);\n    TOAST.ok(\"Claim successfully created.\");\n    props.listClaims({\n      companyId: userProfile.companyId\n    });\n  }\n  if (isUpdateClaimCollection && props.updateClaimState && props.updateClaimState.status === ACTION_STATUSES.SUCCEED) {\n    TOAST.ok(\"Claim successfully updated.\");\n    setIsUpdateClaimCollection(false);\n    props.listClaims({\n      companyId: userProfile.companyId\n    });\n  }\n  console.log(\"[isDeleteClaim]\", isDeleteClaimCollection, props.deleteClaimState);\n  if (isDeleteClaimCollection && props.deleteClaimState && props.deleteClaimState.status === ACTION_STATUSES.SUCCEED) {\n    TOAST.ok(\"Claim successfully deleted.\");\n    setIsDeleteClaimCollection(false);\n    props.listClaims({\n      companyId: userProfile.companyId\n    });\n  }\n  var filterRecordHandler = function filterRecordHandler(keyword) {\n    console.log(\"[Keyword]\", keyword);\n    if (!keyword) {\n      setDataSource(_toConsumableArray(originalSource));\n    } else {\n      var temp = _toConsumableArray(originalSource);\n      console.log(\"[Tempt]\", temp);\n      var found = temp.filter(function (data) {\n        return data.code.toLowerCase().indexOf(keyword.toLowerCase()) !== -1 || data.description.toLowerCase().indexOf(keyword.toLowerCase()) !== -1;\n      });\n      setDataSource(found);\n    }\n  };\n  var onCheckboxSelectionHandler = function onCheckboxSelectionHandler(data, isAll, itemIsChecked) {\n    console.log(\"[data ALl]\", data, isAll, itemIsChecked);\n    var dtSource = _toConsumableArray(dataSource);\n    if (isAll) {\n      dtSource.forEach(function (item) {\n        item.isChecked = isAll; // reset\n      });\n    } else if (!isAll && data && data.length > 0) {\n      dtSource.forEach(function (item) {\n        if (item.id.toString() === data[0].toString()) {\n          item.isChecked = itemIsChecked;\n        }\n      });\n    } else if (!isAll && Array.isArray(data) && data.length === 0) {\n      dtSource.forEach(function (item) {\n        item.isChecked = isAll; // reset\n      });\n    }\n\n    setIsAddGroupButtons(dtSource.find(function (f) {\n      return f.isChecked;\n    }));\n    originalSource = _toConsumableArray(dtSource);\n    setDataSource(dtSource);\n  };\n  var exportToExcelHandler = function exportToExcelHandler() {\n    var excelData = dataSource.filter(function (r) {\n      return r.isChecked;\n    });\n    var headers = columns;\n    var excel = Helper.formatExcelReport(headers, excelData);\n    console.log(\"headers\", excel);\n    var fileType = \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    var fileExtension = \".xlsx\";\n    var fileName = \"Claim_list_batch_\".concat(new Date().getTime());\n    if (excelData && excelData.length) {\n      import( /* webpackChunkName: 'json2xls' */\"json2xls\").then(function (json2xls) {\n        // let fileName = fname + '_' + new Date().getTime();\n        var xls = typeof json2xls === \"function\" ? json2xls(excel) : json2xls[\"default\"](excel);\n        var buffer = Buffer.from(xls, \"binary\");\n        // let buffer = Buffer.from(excelBuffer);\n        var data = new Blob([buffer], {\n          type: fileType\n        });\n        FileSaver.saveAs(data, fileName + fileExtension);\n      })[\"catch\"](function (err) {\n        // Handle failure\n        console.log(err);\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GridContainer, {\n      children: /*#__PURE__*/_jsxDEV(GridItem, {\n        xs: 12,\n        sm: 12,\n        md: 12,\n        children: /*#__PURE__*/_jsxDEV(Card, {\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            color: \"success\",\n            children: /*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              justifyContent: \"space-between\",\n              children: /*#__PURE__*/_jsxDEV(\"h4\", {\n                className: classes.cardTitleWhite,\n                children: \"Claim Setup\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 340,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CardBody, {\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              container: true,\n              justifyContent: \"space-between\",\n              style: {\n                paddingBottom: 4\n              },\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                style: {\n                  display: \"inline-flex\",\n                  gap: 10,\n                  paddingTop: 10\n                },\n                children: [/*#__PURE__*/_jsxDEV(Button, {\n                  onClick: function onClick() {\n                    return createFormHandler();\n                  },\n                  variant: \"contained\",\n                  style: {\n                    border: \"solid 1px #2196f3\",\n                    color: \"white\",\n                    background: \"#2196f3\",\n                    fontFamily: \"Roboto\",\n                    fontSize: \"12px\",\n                    fontWeight: 500,\n                    fontStretch: \"normal\",\n                    fontStyle: \"normal\",\n                    lineHeight: 1.71,\n                    letterSpacing: \"0.4px\",\n                    textAlign: \"left\",\n                    cursor: \"pointer\"\n                  },\n                  component: \"span\",\n                  startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 371,\n                    columnNumber: 32\n                  }, this),\n                  children: \"ADD Claim\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 352,\n                  columnNumber: 19\n                }, this), isAddGroupButtons && /*#__PURE__*/_jsxDEV(Button, {\n                  onClick: function onClick() {\n                    return exportToExcelHandler();\n                  },\n                  variant: \"outlined\",\n                  style: {\n                    fontFamily: \"Roboto\",\n                    fontSize: \"12px\",\n                    fontWeight: 500,\n                    fontStretch: \"normal\",\n                    fontStyle: \"normal\",\n                    lineHeight: 1.71,\n                    letterSpacing: \"0.4px\",\n                    textAlign: \"left\",\n                    cursor: \"pointer\"\n                  },\n                  component: \"span\",\n                  startIcon: /*#__PURE__*/_jsxDEV(ImportExport, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 392,\n                    columnNumber: 34\n                  }, this),\n                  children: [\" \", \"Export Excel\", \" \"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 376,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 349,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(FilterTable, {\n                  filterRecordHandler: filterRecordHandler,\n                  isNoDate: true,\n                  main: false\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 400,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 399,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 344,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(HospiceTable, {\n              columns: columns,\n              main: true,\n              grandTotal: grandTotal,\n              dataSource: dataSource,\n              height: 400,\n              onCheckboxSelectionHandler: onCheckboxSelectionHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 407,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 337,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), isFormModal && /*#__PURE__*/_jsxDEV(MedicaidForm, {\n      filterRecordHandler: filterRecordHandler,\n      dataSource: dataSource,\n      createClaimHandler: createClaimHandler,\n      mode: mode,\n      isOpen: isFormModal,\n      isEdit: false,\n      item: item,\n      closeFormModalHandler: closeFormModalHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 421,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n_s(MedicaidFunction, \"2wCXEEFq70Olh/Ndti8QBQrzih4=\", false, function () {\n  return [useStyles];\n});\n_c = MedicaidFunction;\nvar mapStateToProps = function mapStateToProps(store) {\n  return {\n    claims: claimListStateSelector(store),\n    createClaimState: claimCreateStateSelector(store),\n    updateClaimState: claimUpdateStateSelector(store),\n    deleteClaimState: claimDeleteStateSelector(store),\n    profileState: profileListStateSelector(store)\n  };\n};\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    listClaims: function listClaims(data) {\n      return dispatch(attemptToFetchClaim(data));\n    },\n    resetListClaims: function resetListClaims() {\n      return dispatch(resetFetchClaimState());\n    },\n    createClaim: function createClaim(data) {\n      return dispatch(attemptToCreateClaim(data));\n    },\n    resetCreateClaim: function resetCreateClaim() {\n      return dispatch(resetCreateClaimState());\n    },\n    updateClaim: function updateClaim(data) {\n      return dispatch(attemptToUpdateClaim(data));\n    },\n    resetUpdateClaim: function resetUpdateClaim() {\n      return dispatch(resetUpdateClaimState());\n    },\n    deleteClaim: function deleteClaim(data) {\n      return dispatch(attemptToDeleteClaim(data));\n    },\n    resetDeleteClaim: function resetDeleteClaim() {\n      return dispatch(resetDeleteClaimState());\n    }\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(MedicaidFunction);\nvar _c;\n$RefreshReg$(_c, \"MedicaidFunction\");","map":{"version":3,"names":["React","useEffect","useState","makeStyles","GridItem","GridContainer","Card","CardHeader","CardBody","MedicaidHandler","connect","ActionsFunction","ACTION_STATUSES","Button","Grid","AddIcon","HospiceTable","ImportExport","Helper","FileSaver","MedicaidForm","attemptToUpdateClaim","TOAST","claimListStateSelector","claimCreateStateSelector","claimUpdateStateSelector","claimDeleteStateSelector","attemptToFetchClaim","resetFetchClaimState","attemptToCreateClaim","resetCreateClaimState","resetUpdateClaimState","attemptToDeleteClaim","resetDeleteClaimState","FilterTable","profileListStateSelector","jsxDEV","_jsxDEV","Fragment","_Fragment","styles","cardCategoryWhite","color","margin","fontSize","marginTop","marginBottom","cardTitleWhite","minHeight","fontWeight","fontFamily","textDecoration","lineHeight","useStyles","productList","grandTotal","originalSource","undefined","locationList","userProfile","MedicaidFunction","props","_s","_this","classes","_useState","_useState2","_slicedToArray","dataSource","setDataSource","_useState3","columns","_useState4","setColumns","_useState5","_useState6","isClaimsCollection","setIsClaimsCollection","_useState7","_useState8","isCreateClaimCollection","setIsCreateClaimCollection","_useState9","_useState10","isUpdateClaimCollection","setIsUpdateClaimCollection","_useState11","_useState12","isDeleteClaimCollection","setIsDeleteClaimCollection","_useState13","_useState14","isFormModal","setIsFormModal","_useState15","_useState16","item","setItem","_useState17","_useState18","mode","setMode","_useState19","_useState20","isAddGroupButtons","setIsAddGroupButtons","createFormHandler","data","closeFormModalHandler","claims","status","SUCCEED","resetListClaims","createClaimState","resetCreateClaim","updateClaimState","resetUpdateClaim","deleteClaimState","console","log","resetDeleteClaim","profileState","length","listClaims","companyId","source","mapData","cols","map","col","index","name","_objectSpread","editable","render","cellProps","deleteRecordItemHandler","fileName","_jsxFileName","lineNumber","columnNumber","_toConsumableArray","id","deleteClaim","createClaimHandler","general","details","ok","filterRecordHandler","keyword","temp","found","filter","code","toLowerCase","indexOf","description","onCheckboxSelectionHandler","isAll","itemIsChecked","dtSource","forEach","isChecked","toString","Array","isArray","find","f","exportToExcelHandler","excelData","r","headers","excel","formatExcelReport","fileType","fileExtension","concat","Date","getTime","then","json2xls","xls","buffer","Buffer","from","Blob","type","saveAs","err","children","xs","sm","md","container","justifyContent","className","style","paddingBottom","display","gap","paddingTop","onClick","variant","border","background","fontStretch","fontStyle","letterSpacing","textAlign","cursor","component","startIcon","isNoDate","main","height","isOpen","isEdit","_c","mapStateToProps","store","mapDispatchToProps","dispatch","createClaim","updateClaim","$RefreshReg$"],"sources":["/Users/nargelmac/Documents/GitHub/medical-biller/src/views/Claim/Medicaid/MedicaidFunction.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n// @material-ui/core components\nimport { makeStyles } from \"@material-ui/core/styles\";\n// core components\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardBody from \"components/Card/CardBody.js\";\n\nimport MedicaidHandler from \"./handler/MedicaidHandler\";\nimport { connect } from \"react-redux\";\nimport ActionsFunction from \"components/Actions/ActionsFunction\";\nimport { ACTION_STATUSES } from \"utils/constants\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\n\nimport HospiceTable from \"components/Table/HospiceTable\";\nimport { ImportExport } from \"@material-ui/icons\";\nimport Helper from \"utils/helper\";\nimport * as FileSaver from \"file-saver\";\n\nimport MedicaidForm from \"./components/MedicaidForm\";\nimport { attemptToUpdateClaim } from \"store/actions/claimAction\";\nimport TOAST from \"modules/toastManager\";\nimport { claimListStateSelector } from \"store/selectors/claimSelector\";\nimport { claimCreateStateSelector } from \"store/selectors/claimSelector\";\nimport { claimUpdateStateSelector } from \"store/selectors/claimSelector\";\nimport { claimDeleteStateSelector } from \"store/selectors/claimSelector\";\nimport { attemptToFetchClaim } from \"store/actions/claimAction\";\nimport { resetFetchClaimState } from \"store/actions/claimAction\";\nimport { attemptToCreateClaim } from \"store/actions/claimAction\";\nimport { resetCreateClaimState } from \"store/actions/claimAction\";\nimport { resetUpdateClaimState } from \"store/actions/claimAction\";\nimport { attemptToDeleteClaim } from \"store/actions/claimAction\";\nimport { resetDeleteClaimState } from \"store/actions/claimAction\";\nimport FilterTable from \"components/Table/FilterTable\";\nimport { profileListStateSelector } from \"store/selectors/profileSelector\";\nconst styles = {\n  cardCategoryWhite: {\n    \"&,& a,& a:hover,& a:focus\": {\n      color: \"rgba(255,255,255,.62)\",\n      margin: \"0\",\n      fontSize: \"14px\",\n      marginTop: \"0\",\n      marginBottom: \"0\",\n    },\n    \"& a,& a:hover,& a:focus\": {\n      color: \"#FFFFFF\",\n    },\n  },\n  cardTitleWhite: {\n    color: \"#FFFFFF\",\n    marginTop: \"0px\",\n    minHeight: \"auto\",\n    fontWeight: \"300\",\n    fontFamily: \"'Roboto', 'Helvetica', 'Arial', sans-serif\",\n    marginBottom: \"3px\",\n    textDecoration: \"none\",\n    \"& small\": {\n      color: \"#777\",\n      fontSize: \"65%\",\n      fontWeight: \"400\",\n      lineHeight: \"1\",\n    },\n  },\n};\n\nconst useStyles = makeStyles(styles);\nlet productList = [];\nlet grandTotal = 0.0;\nlet originalSource = undefined;\nlet locationList = [];\nlet userProfile = {};\n\nfunction MedicaidFunction(props) {\n  const classes = useStyles();\n\n  const [dataSource, setDataSource] = useState([]);\n  const [columns, setColumns] = useState(MedicaidHandler.columns(true));\n  const [isClaimsCollection, setIsClaimsCollection] = useState(true);\n  const [isCreateClaimCollection, setIsCreateClaimCollection] = useState(true);\n  const [isUpdateClaimCollection, setIsUpdateClaimCollection] = useState(true);\n  const [isDeleteClaimCollection, setIsDeleteClaimCollection] = useState(true);\n  const [isFormModal, setIsFormModal] = useState(false);\n  const [item, setItem] = useState(undefined);\n  const [mode, setMode] = useState(\"create\");\n  const [isAddGroupButtons, setIsAddGroupButtons] = useState(false);\n\n  const createFormHandler = (data, mode) => {\n    setItem(data);\n    setMode(mode || \"create\");\n    setIsFormModal(true);\n  };\n  const closeFormModalHandler = () => {\n    setIsFormModal(false);\n  };\n\n  useEffect(() => {\n    if (\n      !isClaimsCollection &&\n      props.claims &&\n      props.claims.status === ACTION_STATUSES.SUCCEED\n    ) {\n      props.resetListClaims();\n      setIsClaimsCollection(true);\n    }\n\n    if (\n      !isCreateClaimCollection &&\n      props.createClaimState &&\n      props.createClaimState.status === ACTION_STATUSES.SUCCEED\n    ) {\n      props.resetCreateClaim();\n\n      setIsCreateClaimCollection(true);\n    }\n    if (\n      !isUpdateClaimCollection &&\n      props.updateClaimState &&\n      props.updateClaimState.status === ACTION_STATUSES.SUCCEED\n    ) {\n      props.resetUpdateClaim();\n\n      setIsUpdateClaimCollection(true);\n    }\n    if (\n      !isDeleteClaimCollection &&\n      props.deleteClaimState &&\n      props.deleteClaimState.status === ACTION_STATUSES.SUCCEED\n    ) {\n      console.log(\"[change me to true]\");\n      props.resetDeleteClaim();\n      setIsDeleteClaimCollection(true);\n    }\n  }, [\n    isDeleteClaimCollection,\n    isUpdateClaimCollection,\n    isCreateClaimCollection,\n    isClaimsCollection,\n  ]);\n  useEffect(() => {\n    console.log(\"list Claims\", props.profileState);\n    if (\n      props.profileState &&\n      props.profileState.data &&\n      props.profileState.data.length\n    ) {\n      userProfile = props.profileState.data[0];\n      props.listClaims({ companyId: userProfile.companyId });\n    }\n  }, []);\n\n  if (\n    isClaimsCollection &&\n    props.claims &&\n    props.claims.status === ACTION_STATUSES.SUCCEED\n  ) {\n    grandTotal = 0.0;\n    let source = props.claims.data;\n    if (source && source.length) {\n      source = MedicaidHandler.mapData(source, productList);\n    }\n\n    const cols = MedicaidHandler.columns(true).map((col, index) => {\n      if (col.name === \"actions\") {\n        return {\n          ...col,\n          editable: () => false,\n          render: (cellProps) => (\n            <ActionsFunction\n              deleteRecordItemHandler={deleteRecordItemHandler}\n              createFormHandler={createFormHandler}\n              data={{ ...cellProps.data }}\n            />\n          ),\n        };\n      } else {\n        return {\n          ...col,\n          editable: () => false,\n        };\n      }\n    });\n    setColumns(cols);\n    originalSource = [...source];\n\n    setDataSource(source);\n    setIsClaimsCollection(false);\n  }\n  const deleteRecordItemHandler = (id) => {\n    console.log(\"[delete Claim id]\", id);\n    props.deleteClaim(id);\n  };\n  const createClaimHandler = (general, details, mode) => {\n    console.log(\"[Create Claim Handler]\", general, mode, userProfile);\n    /*\n    const finalPayload = [];\n    for (const payload of details) {\n    \n    const params = {\n      code: payload.code,\n      description: payload.description,\n      unit: payload.unit,\n      rate: payload.rate,\n      provider: payload?.provider,\n      companyId: userProfile.companyId,\n      updatedUser: {\n        name: userProfile.name,\n        userId: userProfile.id,\n        date: new Date(),\n      },\n    };\n\n    if (mode === \"create\") {\n      params.createdUser = {\n        name: userProfile.name,\n        userId: userProfile.companyId,\n        date: new Date(),\n      };\n      props.createClaim(params);\n    } else if (mode === \"edit\") {\n      params.id = payload.id;\n      props.updateClaim(params);\n    }\n    closeFormModalHandler();\n    */\n  };\n  console.log(\"[Is Create Claim Collection]\", props.createClaimState);\n  if (\n    isCreateClaimCollection &&\n    props.createClaimState &&\n    props.createClaimState.status === ACTION_STATUSES.SUCCEED\n  ) {\n    setIsCreateClaimCollection(false);\n    TOAST.ok(\"Claim successfully created.\");\n    props.listClaims({ companyId: userProfile.companyId });\n  }\n  if (\n    isUpdateClaimCollection &&\n    props.updateClaimState &&\n    props.updateClaimState.status === ACTION_STATUSES.SUCCEED\n  ) {\n    TOAST.ok(\"Claim successfully updated.\");\n    setIsUpdateClaimCollection(false);\n    props.listClaims({ companyId: userProfile.companyId });\n  }\n  console.log(\n    \"[isDeleteClaim]\",\n    isDeleteClaimCollection,\n    props.deleteClaimState\n  );\n  if (\n    isDeleteClaimCollection &&\n    props.deleteClaimState &&\n    props.deleteClaimState.status === ACTION_STATUSES.SUCCEED\n  ) {\n    TOAST.ok(\"Claim successfully deleted.\");\n    setIsDeleteClaimCollection(false);\n\n    props.listClaims({ companyId: userProfile.companyId });\n  }\n\n  const filterRecordHandler = (keyword) => {\n    console.log(\"[Keyword]\", keyword);\n    if (!keyword) {\n      setDataSource([...originalSource]);\n    } else {\n      const temp = [...originalSource];\n      console.log(\"[Tempt]\", temp);\n      let found = temp.filter(\n        (data) =>\n          data.code.toLowerCase().indexOf(keyword.toLowerCase()) !== -1 ||\n          data.description.toLowerCase().indexOf(keyword.toLowerCase()) !== -1\n      );\n\n      setDataSource(found);\n    }\n  };\n\n  const onCheckboxSelectionHandler = (data, isAll, itemIsChecked) => {\n    console.log(\"[data ALl]\", data, isAll, itemIsChecked);\n    let dtSource = [...dataSource];\n    if (isAll) {\n      dtSource.forEach((item) => {\n        item.isChecked = isAll; // reset\n      });\n    } else if (!isAll && data && data.length > 0) {\n      dtSource.forEach((item) => {\n        if (item.id.toString() === data[0].toString()) {\n          item.isChecked = itemIsChecked;\n        }\n      });\n    } else if (!isAll && Array.isArray(data) && data.length === 0) {\n      dtSource.forEach((item) => {\n        item.isChecked = isAll; // reset\n      });\n    }\n    setIsAddGroupButtons(dtSource.find((f) => f.isChecked));\n    originalSource = [...dtSource];\n    setDataSource(dtSource);\n  };\n  const exportToExcelHandler = () => {\n    const excelData = dataSource.filter((r) => r.isChecked);\n    const headers = columns;\n    const excel = Helper.formatExcelReport(headers, excelData);\n    console.log(\"headers\", excel);\n    const fileType =\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\n    const fileExtension = \".xlsx\";\n    let fileName = `Claim_list_batch_${new Date().getTime()}`;\n\n    if (excelData && excelData.length) {\n      import(/* webpackChunkName: 'json2xls' */ \"json2xls\")\n        .then((json2xls) => {\n          // let fileName = fname + '_' + new Date().getTime();\n          const xls =\n            typeof json2xls === \"function\"\n              ? json2xls(excel)\n              : json2xls.default(excel);\n          const buffer = Buffer.from(xls, \"binary\");\n          // let buffer = Buffer.from(excelBuffer);\n          const data = new Blob([buffer], { type: fileType });\n          FileSaver.saveAs(data, fileName + fileExtension);\n        })\n        .catch((err) => {\n          // Handle failure\n          console.log(err);\n        });\n    }\n  };\n\n  return (\n    <>\n      <GridContainer>\n        <GridItem xs={12} sm={12} md={12}>\n          <Card>\n            <CardHeader color=\"success\">\n              <Grid container justifyContent=\"space-between\">\n                <h4 className={classes.cardTitleWhite}>Claim Setup</h4>\n              </Grid>\n            </CardHeader>\n            <CardBody>\n              <Grid\n                container\n                justifyContent=\"space-between\"\n                style={{ paddingBottom: 4 }}\n              >\n                <div\n                  style={{ display: \"inline-flex\", gap: 10, paddingTop: 10 }}\n                >\n                  <Button\n                    onClick={() => createFormHandler()}\n                    variant=\"contained\"\n                    style={{\n                      border: \"solid 1px #2196f3\",\n                      color: \"white\",\n                      background: \"#2196f3\",\n                      fontFamily: \"Roboto\",\n                      fontSize: \"12px\",\n                      fontWeight: 500,\n\n                      fontStretch: \"normal\",\n                      fontStyle: \"normal\",\n                      lineHeight: 1.71,\n                      letterSpacing: \"0.4px\",\n                      textAlign: \"left\",\n                      cursor: \"pointer\",\n                    }}\n                    component=\"span\"\n                    startIcon={<AddIcon />}\n                  >\n                    ADD Claim\n                  </Button>\n                  {isAddGroupButtons && (\n                    <Button\n                      onClick={() => exportToExcelHandler()}\n                      variant=\"outlined\"\n                      style={{\n                        fontFamily: \"Roboto\",\n                        fontSize: \"12px\",\n                        fontWeight: 500,\n\n                        fontStretch: \"normal\",\n                        fontStyle: \"normal\",\n                        lineHeight: 1.71,\n                        letterSpacing: \"0.4px\",\n                        textAlign: \"left\",\n                        cursor: \"pointer\",\n                      }}\n                      component=\"span\"\n                      startIcon={<ImportExport />}\n                    >\n                      {\" \"}\n                      Export Excel{\" \"}\n                    </Button>\n                  )}\n                </div>\n                <div>\n                  <FilterTable\n                    filterRecordHandler={filterRecordHandler}\n                    isNoDate={true}\n                    main={false}\n                  />\n                </div>\n              </Grid>\n              <HospiceTable\n                columns={columns}\n                main={true}\n                grandTotal={grandTotal}\n                dataSource={dataSource}\n                height={400}\n                onCheckboxSelectionHandler={onCheckboxSelectionHandler}\n              />\n            </CardBody>\n          </Card>\n        </GridItem>\n      </GridContainer>\n\n      {isFormModal && (\n        <MedicaidForm\n          filterRecordHandler={filterRecordHandler}\n          dataSource={dataSource}\n          createClaimHandler={createClaimHandler}\n          mode={mode}\n          isOpen={isFormModal}\n          isEdit={false}\n          item={item}\n          closeFormModalHandler={closeFormModalHandler}\n        />\n      )}\n    </>\n  );\n}\n\nconst mapStateToProps = (store) => ({\n  claims: claimListStateSelector(store),\n  createClaimState: claimCreateStateSelector(store),\n  updateClaimState: claimUpdateStateSelector(store),\n  deleteClaimState: claimDeleteStateSelector(store),\n  profileState: profileListStateSelector(store),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  listClaims: (data) => dispatch(attemptToFetchClaim(data)),\n  resetListClaims: () => dispatch(resetFetchClaimState()),\n  createClaim: (data) => dispatch(attemptToCreateClaim(data)),\n  resetCreateClaim: () => dispatch(resetCreateClaimState()),\n  updateClaim: (data) => dispatch(attemptToUpdateClaim(data)),\n  resetUpdateClaim: () => dispatch(resetUpdateClaimState()),\n  deleteClaim: (data) => dispatch(attemptToDeleteClaim(data)),\n  resetDeleteClaim: () => dispatch(resetDeleteClaimState()),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MedicaidFunction);\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}