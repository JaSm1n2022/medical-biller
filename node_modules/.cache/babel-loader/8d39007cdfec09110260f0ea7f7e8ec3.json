{"ast":null,"code":"import _classCallCheck from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nvar Timer = /*#__PURE__*/function () {\n  function Timer(callback, timerCalc) {\n    _classCallCheck(this, Timer);\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n    this.timer = undefined;\n    this.tries = 0;\n    this.callback = callback;\n    this.timerCalc = timerCalc;\n  }\n  _createClass(Timer, [{\n    key: \"reset\",\n    value: function reset() {\n      this.tries = 0;\n      clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n  }, {\n    key: \"scheduleTimeout\",\n    value: function scheduleTimeout() {\n      var _this = this;\n      clearTimeout(this.timer);\n      this.timer = setTimeout(function () {\n        _this.tries = _this.tries + 1;\n        _this.callback();\n      }, this.timerCalc(this.tries + 1));\n    }\n  }]);\n  return Timer;\n}();\nexport { Timer as default };","map":{"version":3,"sources":["../../../src/lib/timer.ts"],"names":[],"mappings":";;AAAA;;;;;;;;;;;AAWG;AAXH,IAYqB,KAAK;EAIxB,SAAA,MAAmB,QAAkB,EAAS,SAAmB,EAAA;IAAA,eAAA,OAAA,KAAA;IAA9C,IAAA,CAAA,QAAQ,GAAR,QAAQ;IAAmB,IAAA,CAAA,SAAS,GAAT,SAAS;IAHvD,IAAA,CAAA,KAAK,GAAuB,SAAS;IACrC,IAAA,CAAA,KAAK,GAAW,CAAC;IAGf,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,SAAS,GAAG,SAAS;EAC5B;EAAC,YAAA,CAAA,KAAA;IAAA,GAAA;IAAA,KAAA,EAED,SAAA,MAAA,EAAK;MACH,IAAI,CAAC,KAAK,GAAG,CAAC;MACd,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;IAC1B;IAEA;EAAA;IAAA,GAAA;IAAA,KAAA,EACA,SAAA,gBAAA,EAAe;MAAA,IAAA,KAAA;MACb,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC;MAExB,IAAI,CAAC,KAAK,GAAQ,UAAU,CAAC,YAAK;QAChC,KAAI,CAAC,KAAK,GAAG,KAAI,CAAC,KAAK,GAAG,CAAC;QAC3B,KAAI,CAAC,QAAQ,CAAA,CAAE;MACjB,CAAC,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;IACpC;EAAC;EAAA,OAAA,KAAA;AAAA;AAAA,SAtBkB,KAAK,IAAA,OAAA","sourceRoot":"","sourcesContent":["/**\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\n *\n * @example\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\n *      return [1000, 5000, 10000][tries - 1] || 10000\n *    })\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n *    reconnectTimer.scheduleTimeout() // fires after 5000\n *    reconnectTimer.reset()\n *    reconnectTimer.scheduleTimeout() // fires after 1000\n */\nexport default class Timer {\n    constructor(callback, timerCalc) {\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n        this.timer = undefined;\n        this.tries = 0;\n        this.callback = callback;\n        this.timerCalc = timerCalc;\n    }\n    reset() {\n        this.tries = 0;\n        clearTimeout(this.timer);\n    }\n    // Cancels any previous scheduleTimeout and schedules callback\n    scheduleTimeout() {\n        clearTimeout(this.timer);\n        this.timer = setTimeout(() => {\n            this.tries = this.tries + 1;\n            this.callback();\n        }, this.timerCalc(this.tries + 1));\n    }\n}\n//# sourceMappingURL=timer.js.map"]},"metadata":{},"sourceType":"module"}