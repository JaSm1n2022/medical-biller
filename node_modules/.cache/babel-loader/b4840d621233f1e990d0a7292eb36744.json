{"ast":null,"code":"/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _useProperty5 = _interopRequireDefault(require(\"../useProperty\"));\nvar _isSelectionEnabled = _interopRequireDefault(require(\"./isSelectionEnabled\"));\nvar _isMultiSelect = _interopRequireDefault(require(\"./isMultiSelect\"));\nvar _isSelectionControlled = _interopRequireDefault(require(\"./isSelectionControlled\"));\nvar _handleSelection = require(\"../useRow/handleSelection\");\nvar _batchUpdate = _interopRequireDefault(require(\"../../utils/batchUpdate\"));\nvar _usePrevious = _interopRequireDefault(require(\"../usePrevious\"));\nvar EMPTY_OBJECT = {};\nvar getUnselectedFromProps = function getUnselectedFromProps(computedProps) {\n  if (!computedProps) {\n    return null;\n  }\n  if (computedProps.computedUnselected === undefined) {\n    return null;\n  }\n  return computedProps.computedUnselected;\n};\nvar getUnselectedCountFromProps = function getUnselectedCountFromProps(computedProps, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n  if (!computedProps.computedRowMultiSelectionEnabled) {\n    return 0;\n  }\n  unselected = unselected === undefined ? getUnselectedFromProps(computedProps) : unselected;\n  return unselected ? Object.keys(unselected).length : 0;\n};\nvar getSelectedCountFromProps = function getSelectedCountFromProps(computedProps, selected, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n  var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n  selected = selected === undefined ? computedProps.computedSelected : selected;\n  if (multiSelect && selected === true) {\n    var unselectedCount = getUnselectedCountFromProps(computedProps, unselected);\n    return computedProps.paginationCount - unselectedCount;\n  }\n  return multiSelect ? selected ? Object.keys(selected).length : 0 : !selected || Object.keys(selected).length === 0 ? 0 : 1;\n};\nvar useUnselected = function useUnselected(props, _ref, computedPropsRef) {\n  var rowSelectionEnabled = _ref.rowSelectionEnabled,\n    rowMultiSelectionEnabled = _ref.rowMultiSelectionEnabled;\n  var _useProperty = (0, _useProperty5[\"default\"])(props, 'unselected'),\n    _useProperty2 = (0, _slicedToArray2[\"default\"])(_useProperty, 2),\n    unselected = _useProperty2[0],\n    setUnselected = _useProperty2[1];\n  var _useState = (0, _react.useState)(unselected ? Object.keys(unselected).length : 0),\n    _useState2 = (0, _slicedToArray2[\"default\"])(_useState, 2),\n    unselectedCount = _useState2[0],\n    setUnselectedCount = _useState2[1];\n  if (!rowSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n  if (!rowMultiSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n  return {\n    unselected: unselected,\n    setUnselected: setUnselected\n  };\n};\nvar useSelected = function useSelected(props, computedProps, computedPropsRef) {\n  var _useProperty3 = (0, _useProperty5[\"default\"])(props, 'selected', undefined, {\n      onChange: function onChange(selected) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          silent = _ref2.silent,\n          unselected = _ref2.unselected,\n          data = _ref2.data;\n        var computedProps = computedPropsRef.current;\n        if (props.onSelectionChange && !silent) {\n          props.onSelectionChange({\n            selected: selected,\n            data: data,\n            unselected: unselected !== undefined ? unselected : computedProps != null ? computedProps.computedUnselected : null\n          });\n        }\n      }\n    }),\n    _useProperty4 = (0, _slicedToArray2[\"default\"])(_useProperty3, 2),\n    selected = _useProperty4[0],\n    setSelected = _useProperty4[1];\n  var rowSelectionEnabled = (0, _isSelectionEnabled[\"default\"])(props);\n  var rowMultiSelectionEnabled = (0, _isMultiSelect[\"default\"])(props);\n  if (!rowSelectionEnabled) {\n    return {\n      selected: null,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n  if ((0, _isSelectionControlled[\"default\"])(props)) {\n    return {\n      selected: selected,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n  if (rowMultiSelectionEnabled && ((0, _typeof2[\"default\"])(selected) != 'object' || !selected) && selected !== true) {\n    selected = EMPTY_OBJECT;\n  }\n  return {\n    selected: selected,\n    setSelected: setSelected,\n    rowSelectionEnabled: rowSelectionEnabled,\n    rowMultiSelectionEnabled: rowMultiSelectionEnabled\n  };\n};\nvar _default = function _default(props, computedProps, computedPropsRef) {\n  var _useSelected = useSelected(props, computedProps, computedPropsRef),\n    computedSelected = _useSelected.selected,\n    setSelected = _useSelected.setSelected,\n    rowMultiSelectionEnabled = _useSelected.rowMultiSelectionEnabled,\n    rowSelectionEnabled = _useSelected.rowSelectionEnabled;\n  var previousRowMultiSelectionEnabled = (0, _usePrevious[\"default\"])(rowMultiSelectionEnabled, rowMultiSelectionEnabled);\n  (0, _react.useEffect)(function () {\n    if (previousRowMultiSelectionEnabled === true && rowMultiSelectionEnabled === false) {\n      setSelected({});\n    }\n  }, [previousRowMultiSelectionEnabled, rowMultiSelectionEnabled]);\n  var computedRowSelectionEnabled = rowSelectionEnabled;\n  var computedRowMultiSelectionEnabled = rowMultiSelectionEnabled;\n  var _useUnselected = useUnselected(props, {\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    }, computedPropsRef),\n    computedUnselected = _useUnselected.unselected,\n    setUnselected = _useUnselected.setUnselected;\n  var computedSelectedCount = getSelectedCountFromProps({\n    computedPagination: computedProps.computedPagination,\n    computedRemoteData: computedProps.computedRemoteData,\n    paginationCount: computedProps.paginationCount,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedSelected, computedUnselected);\n  var computedUnselectedCount = getUnselectedCountFromProps({\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedUnselected);\n  var isSelectionEmpty = (0, _react.useCallback)(function () {\n    var selected = computedSelected;\n    var selectionEmpty = false;\n    if (selected == null) {\n      selectionEmpty = true;\n    }\n    if ((0, _typeof2[\"default\"])(selected) === 'object' && selected !== null) {\n      selectionEmpty = Object.keys(selected).length === 0;\n    }\n    return selectionEmpty;\n  }, [computedSelected]);\n  var getSelectedMap = (0, _react.useCallback)(function () {\n    if (computedRowMultiSelectionEnabled) {\n      return computedSelected;\n    }\n    return (0, _defineProperty2[\"default\"])({}, computedSelected, true);\n  }, [computedRowMultiSelectionEnabled, computedSelected]);\n  var getUnselected = (0, _react.useCallback)(function () {\n    return getUnselectedFromProps(computedPropsRef.current);\n  }, []);\n  var getUnselectedMap = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return {};\n    }\n    var unselected = getUnselected();\n    if (computedProps.computedRowMultiSelectionEnabled) {\n      return unselected || {};\n    }\n    return {};\n  }, [getUnselected]);\n  var getUnselectedCount = function getUnselectedCount(unselected) {\n    return getUnselectedCountFromProps(computedPropsRef.current, unselected);\n  };\n  var getSelectedCount = function getSelectedCount(selected, unselected) {\n    return getSelectedCountFromProps(computedPropsRef.current, selected, unselected);\n  };\n  var isRowSelected = (0, _react.useCallback)(function (data) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return false;\n    }\n    if (typeof data == 'number') {\n      data = computedProps.getItemAt(data);\n    }\n    var selectedMap = getSelectedMap();\n    var id = computedProps.getItemId(data);\n    if (selectedMap === true) {\n      var unselectedMap = getUnselectedMap();\n      return !unselectedMap[id];\n    }\n    return !!selectedMap[id];\n  }, [getSelectedMap, getUnselectedMap]);\n  var cellSelectionTmp = props.cellSelection || props.defaultCellSelection;\n  var activeCellDefined = props.activeCell !== undefined || props.defaultActiveCell !== undefined;\n  var computedHasRowNavigation = (computedRowSelectionEnabled || !cellSelectionTmp) && computedProps.computedActiveIndex > -1 ? true : props.enableKeyboardNavigation !== false && !cellSelectionTmp && !activeCellDefined;\n  if (props.enableKeyboardNavigation === false) {\n    computedHasRowNavigation = false;\n  }\n  var _computedProps$useCel = computedProps.useCellSelection(props, {\n      rowSelectionEnabled: rowSelectionEnabled,\n      listenOnCellEnter: computedProps.listenOnCellEnter,\n      hasRowNavigation: computedHasRowNavigation\n    }, computedPropsRef),\n    computedCellSelection = _computedProps$useCel.computedCellSelection,\n    setCellSelection = _computedProps$useCel.setCellSelection,\n    computedCellSelectionEnabled = _computedProps$useCel.cellSelectionEnabled,\n    computedCellMultiSelectionEnabled = _computedProps$useCel.cellMultiSelectionEnabled,\n    computedCellNavigationEnabled = _computedProps$useCel.cellNavigationEnabled,\n    computedActiveCell = _computedProps$useCel.computedActiveCell,\n    incrementActiveCell = _computedProps$useCel.incrementActiveCell,\n    getCellSelectionIdKey = _computedProps$useCel.getCellSelectionIdKey,\n    getCellSelectionBetween = _computedProps$useCel.getCellSelectionBetween,\n    toggleActiveCellSelection = _computedProps$useCel.toggleActiveCellSelection,\n    onCellEnter = _computedProps$useCel.onCellEnter,\n    setActiveCell = _computedProps$useCel.setActiveCell,\n    getCellSelectionKey = _computedProps$useCel.getCellSelectionKey,\n    cellDragStartRowIndex = _computedProps$useCel.cellDragStartRowIndex,\n    setCellDragStartRowIndex = _computedProps$useCel.setCellDragStartRowIndex,\n    onCellSelectionDraggerMouseDown = _computedProps$useCel.onCellSelectionDraggerMouseDown,\n    computedCellBulkUpdateMouseDown = _computedProps$useCel.computedCellBulkUpdateMouseDown,\n    bulkUpdateMouseDown = _computedProps$useCel.bulkUpdateMouseDown,\n    computedCellBulkUpdateMouseUp = _computedProps$useCel.computedCellBulkUpdateMouseUp;\n  var selectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (!computedProps.computedRowSelectionEnabled) {\n      return;\n    }\n    var data = computedProps.data;\n    var dataMap = computedProps.dataMap;\n    if (computedProps.computedGroupBy) {\n      dataMap = {};\n      data = data.filter(function (d) {\n        var id = computedProps.getItemId(d);\n        if (!d.__group) {\n          dataMap[id] = id;\n          return true;\n        }\n      });\n    }\n    if (computedProps.computedTreeEnabled && computedProps.stickyTreeNodes) {\n      var vl = computedProps.getVirtualList();\n      vl.updateStickyRows(undefined, undefined, {\n        force: true\n      });\n    }\n    (0, _handleSelection.notifySelection)(computedProps, computedProps.computedRemoteData || computedProps.computedPagination ? data.length === 0 ? false : true : dataMap, data, null);\n  }, []);\n  var deselectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (computedProps.computedTreeEnabled && computedProps.stickyTreeNodes) {\n      var vl = computedProps.getVirtualList();\n      vl.updateStickyRows(undefined, undefined, {\n        force: true\n      });\n    }\n    (0, _handleSelection.notifySelection)(computedProps, {}, [], null);\n  }, []);\n  var setRowSelected = (0, _react.useCallback)(function (index, selected, event) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var queue = (0, _batchUpdate[\"default\"])();\n    if (computedProps.checkboxSelectEnableShiftKey && computedProps.computedRowMultiSelectionEnabled) {\n      if (event && event.target) {\n        var shiftKey = event.shiftKey,\n          metaKey = event.metaKey,\n          ctrlKey = event.ctrlKey;\n        if (shiftKey) {\n          var rowProps = {\n            data: computedProps.getItemAt(index),\n            rowIndex: index\n          };\n          (0, _handleSelection.handleSelection)(rowProps, computedProps, {\n            shiftKey: shiftKey,\n            metaKey: metaKey,\n            ctrlKey: ctrlKey\n          }, queue);\n          return;\n        }\n        computedProps.shiftKeyIndexRef.current = index;\n        computedProps.selectionIndexRef.current = index;\n      }\n    }\n    computedProps.setSelectedAt(index, selected, queue);\n    queue.commit();\n  }, [computedProps.initialProps.checkboxSelectEnableShiftKey]);\n  var setSelectedAt = (0, _react.useCallback)(function (index, selected, queue) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var data = computedProps.data[index];\n    if (!data) {\n      return;\n    }\n    var id = computedProps.getItemId(data);\n    computedProps.setSelectedById(id, selected, queue);\n  }, []);\n  var treeGridChildrenSelection = function treeGridChildrenSelection(dataArray, id, selected, clone, treeGridChildrenDeselectionEnabled, parentNode) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var idProperty = computedProps.idProperty;\n    var nodesName = computedProps.nodesProperty;\n    var pathSeparator = computedProps.nodePathSeparator;\n    var expandedNodes = computedProps.computedExpandedNodes || EMPTY_OBJECT;\n    var generateIdFromPath = computedProps.generateIdFromPath;\n    for (var i = 0; i < dataArray.length; i++) {\n      var item = dataArray[i];\n      if (item) {\n        var _id$split;\n        var itemId = item[idProperty];\n        var itemNodes = item[nodesName];\n        var parentNodeId = parentNode ? \"\".concat(parentNode[idProperty]) : undefined;\n        var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(itemId) : \"\".concat(itemId);\n        if (generateIdFromPath) {\n          item[idProperty] = path;\n        }\n        var idLength = (_id$split = id.split(pathSeparator)) === null || _id$split === void 0 ? void 0 : _id$split.length;\n        var idFromPath = path.split(pathSeparator).slice(0, idLength).join(pathSeparator);\n        if (idFromPath === id) {\n          var treeData = computedProps.dataMap ? computedProps.dataMap[path] : null;\n          if (!treeData) {\n            continue;\n          }\n          if (selected) {\n            clone[path] = treeData;\n          } else {\n            if (treeGridChildrenDeselectionEnabled) {\n              delete clone[path];\n            } else {\n              delete clone[id];\n            }\n          }\n        }\n        if (expandedNodes && expandedNodes[idFromPath]) {\n          if (Array.isArray(itemNodes)) {\n            treeGridChildrenSelection(itemNodes, id, selected, clone, treeGridChildrenDeselectionEnabled, item);\n          }\n        }\n      }\n    }\n    return clone;\n  };\n  var setSelectedById = (0, _react.useCallback)(function (id, selected, queue) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var data = computedProps.dataMap ? computedProps.dataMap[id] : null;\n    if (!data) {\n      return;\n    }\n    var isSelected = computedProps.isRowSelected(data);\n    var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n    if (isSelected === selected) {\n      return;\n    }\n    if (multiSelect) {\n      var selectedMap = computedProps.computedSelected;\n      var unselectedMap = selectedMap === true ? computedProps.computedUnselected || {} : null;\n      var clone = selectedMap;\n      if (selectedMap === true) {\n        if (unselectedMap) {\n          unselectedMap = Object.assign({}, unselectedMap);\n        }\n        if (!selected && unselectedMap) {\n          unselectedMap[id] = true;\n          var totalCount = computedProps.paginationCount;\n          if (Object.keys(unselectedMap).length === totalCount) {\n            computedProps.deselectAll();\n            return;\n          }\n        } else {\n          if (unselectedMap) {\n            delete unselectedMap[id];\n          }\n          if (getUnselectedCountFromProps(computedProps, unselectedMap) === 0) {\n            unselectedMap = null;\n          }\n        }\n      } else {\n        clone = Object.assign({}, selectedMap);\n        if (computedProps.computedTreeEnabled && computedProps.treeGridChildrenSelectionEnabled) {\n          var originalData = JSON.stringify(computedProps.originalData || []);\n          var cloneOriginalData = (0, _toConsumableArray2[\"default\"])(JSON.parse(originalData));\n          var treeGridChildrenDeselectionEnabled = computedProps.treeGridChildrenDeselectionEnabled;\n          treeGridChildrenSelection(cloneOriginalData, id, selected, clone, treeGridChildrenDeselectionEnabled);\n        } else {\n          if (selected) {\n            clone[id] = data;\n          } else {\n            delete clone[id];\n          }\n        }\n      }\n      (0, _handleSelection.notifySelection)(computedProps, clone, data, unselectedMap, queue);\n    } else {\n      (0, _handleSelection.notifySelection)(computedProps, selected ? id : null, data, null, queue);\n    }\n  }, []);\n  return {\n    selectAll: selectAll,\n    deselectAll: deselectAll,\n    setRowSelected: setRowSelected,\n    setSelectedAt: setSelectedAt,\n    setSelectedById: setSelectedById,\n    setCellSelection: setCellSelection,\n    computedCellSelection: computedCellSelection,\n    computedCellSelectionEnabled: computedCellSelectionEnabled,\n    computedCellMultiSelectionEnabled: computedCellMultiSelectionEnabled,\n    computedCellNavigationEnabled: computedCellNavigationEnabled,\n    computedActiveCell: computedActiveCell,\n    getCellSelectionBetween: getCellSelectionBetween,\n    incrementActiveCell: incrementActiveCell,\n    cellDragStartRowIndex: cellDragStartRowIndex,\n    setCellDragStartRowIndex: setCellDragStartRowIndex,\n    onCellEnter: onCellEnter,\n    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,\n    toggleActiveCellSelection: toggleActiveCellSelection,\n    computedHasRowNavigation: computedHasRowNavigation,\n    computedRowSelectionEnabled: computedRowSelectionEnabled,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedSelected: computedSelected,\n    setSelected: setSelected,\n    computedUnselected: computedUnselected,\n    setUnselected: setUnselected,\n    isSelectionEmpty: isSelectionEmpty,\n    getSelectedMap: getSelectedMap,\n    getUnselectedMap: getUnselectedMap,\n    isRowSelected: isRowSelected,\n    getUnselectedCount: getUnselectedCount,\n    getSelectedCount: getSelectedCount,\n    computedUnselectedCount: computedUnselectedCount,\n    computedSelectedCount: computedSelectedCount,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey,\n    computedCellBulkUpdateMouseDown: computedCellBulkUpdateMouseDown,\n    computedCellBulkUpdateMouseUp: computedCellBulkUpdateMouseUp,\n    bulkUpdateMouseDown: bulkUpdateMouseDown\n  };\n};\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_toConsumableArray2","_defineProperty2","_typeof2","_slicedToArray2","_react","_useProperty5","_isSelectionEnabled","_isMultiSelect","_isSelectionControlled","_handleSelection","_batchUpdate","_usePrevious","EMPTY_OBJECT","getUnselectedFromProps","computedProps","computedUnselected","undefined","getUnselectedCountFromProps","unselected","computedRowSelectionEnabled","computedRowMultiSelectionEnabled","keys","length","getSelectedCountFromProps","selected","multiSelect","computedSelected","unselectedCount","paginationCount","useUnselected","props","_ref","computedPropsRef","rowSelectionEnabled","rowMultiSelectionEnabled","_useProperty","_useProperty2","setUnselected","_useState","useState","_useState2","setUnselectedCount","useSelected","_useProperty3","onChange","_ref2","arguments","silent","data","current","onSelectionChange","_useProperty4","setSelected","_default","_useSelected","previousRowMultiSelectionEnabled","useEffect","_useUnselected","computedSelectedCount","computedPagination","computedRemoteData","computedUnselectedCount","isSelectionEmpty","useCallback","selectionEmpty","getSelectedMap","getUnselected","getUnselectedMap","getUnselectedCount","getSelectedCount","isRowSelected","getItemAt","selectedMap","id","getItemId","unselectedMap","cellSelectionTmp","cellSelection","defaultCellSelection","activeCellDefined","activeCell","defaultActiveCell","computedHasRowNavigation","computedActiveIndex","enableKeyboardNavigation","_computedProps$useCel","useCellSelection","listenOnCellEnter","hasRowNavigation","computedCellSelection","setCellSelection","computedCellSelectionEnabled","cellSelectionEnabled","computedCellMultiSelectionEnabled","cellMultiSelectionEnabled","computedCellNavigationEnabled","cellNavigationEnabled","computedActiveCell","incrementActiveCell","getCellSelectionIdKey","getCellSelectionBetween","toggleActiveCellSelection","onCellEnter","setActiveCell","getCellSelectionKey","cellDragStartRowIndex","setCellDragStartRowIndex","onCellSelectionDraggerMouseDown","computedCellBulkUpdateMouseDown","bulkUpdateMouseDown","computedCellBulkUpdateMouseUp","selectAll","dataMap","computedGroupBy","filter","d","__group","computedTreeEnabled","stickyTreeNodes","vl","getVirtualList","updateStickyRows","force","notifySelection","deselectAll","setRowSelected","index","event","queue","checkboxSelectEnableShiftKey","target","shiftKey","metaKey","ctrlKey","rowProps","rowIndex","handleSelection","shiftKeyIndexRef","selectionIndexRef","setSelectedAt","commit","initialProps","setSelectedById","treeGridChildrenSelection","dataArray","clone","treeGridChildrenDeselectionEnabled","parentNode","idProperty","nodesName","nodesProperty","pathSeparator","nodePathSeparator","expandedNodes","computedExpandedNodes","generateIdFromPath","i","item","_id$split","itemId","itemNodes","parentNodeId","concat","path","idLength","split","idFromPath","slice","join","treeData","Array","isArray","isSelected","assign","totalCount","treeGridChildrenSelectionEnabled","originalData","JSON","stringify","cloneOriginalData","parse"],"sources":["/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@inovua/reactdatagrid-community/hooks/useSelection/index.js"],"sourcesContent":["/** \n * Copyright Â© INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/toConsumableArray\"));\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\nvar _react = require(\"react\");\nvar _useProperty5 = _interopRequireDefault(require(\"../useProperty\"));\nvar _isSelectionEnabled = _interopRequireDefault(require(\"./isSelectionEnabled\"));\nvar _isMultiSelect = _interopRequireDefault(require(\"./isMultiSelect\"));\nvar _isSelectionControlled = _interopRequireDefault(require(\"./isSelectionControlled\"));\nvar _handleSelection = require(\"../useRow/handleSelection\");\nvar _batchUpdate = _interopRequireDefault(require(\"../../utils/batchUpdate\"));\nvar _usePrevious = _interopRequireDefault(require(\"../usePrevious\"));\nvar EMPTY_OBJECT = {};\nvar getUnselectedFromProps = function getUnselectedFromProps(computedProps) {\n  if (!computedProps) {\n    return null;\n  }\n  if (computedProps.computedUnselected === undefined) {\n    return null;\n  }\n  return computedProps.computedUnselected;\n};\nvar getUnselectedCountFromProps = function getUnselectedCountFromProps(computedProps, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n  if (!computedProps.computedRowMultiSelectionEnabled) {\n    return 0;\n  }\n  unselected = unselected === undefined ? getUnselectedFromProps(computedProps) : unselected;\n  return unselected ? Object.keys(unselected).length : 0;\n};\nvar getSelectedCountFromProps = function getSelectedCountFromProps(computedProps, selected, unselected) {\n  if (!computedProps) {\n    return 0;\n  }\n  if (!computedProps.computedRowSelectionEnabled) {\n    return 0;\n  }\n  var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n  selected = selected === undefined ? computedProps.computedSelected : selected;\n  if (multiSelect && selected === true) {\n    var unselectedCount = getUnselectedCountFromProps(computedProps, unselected);\n    return computedProps.paginationCount - unselectedCount;\n  }\n  return multiSelect ? selected ? Object.keys(selected).length : 0 : !selected || Object.keys(selected).length === 0 ? 0 : 1;\n};\nvar useUnselected = function useUnselected(props, _ref, computedPropsRef) {\n  var rowSelectionEnabled = _ref.rowSelectionEnabled,\n    rowMultiSelectionEnabled = _ref.rowMultiSelectionEnabled;\n  var _useProperty = (0, _useProperty5.default)(props, 'unselected'),\n    _useProperty2 = (0, _slicedToArray2.default)(_useProperty, 2),\n    unselected = _useProperty2[0],\n    setUnselected = _useProperty2[1];\n  var _useState = (0, _react.useState)(unselected ? Object.keys(unselected).length : 0),\n    _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n    unselectedCount = _useState2[0],\n    setUnselectedCount = _useState2[1];\n  if (!rowSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n  if (!rowMultiSelectionEnabled) {\n    return {\n      unselected: null,\n      setUnselected: setUnselected\n    };\n  }\n  return {\n    unselected: unselected,\n    setUnselected: setUnselected\n  };\n};\nvar useSelected = function useSelected(props, computedProps, computedPropsRef) {\n  var _useProperty3 = (0, _useProperty5.default)(props, 'selected', undefined, {\n      onChange: function onChange(selected) {\n        var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          silent = _ref2.silent,\n          unselected = _ref2.unselected,\n          data = _ref2.data;\n        var computedProps = computedPropsRef.current;\n        if (props.onSelectionChange && !silent) {\n          props.onSelectionChange({\n            selected: selected,\n            data: data,\n            unselected: unselected !== undefined ? unselected : computedProps != null ? computedProps.computedUnselected : null\n          });\n        }\n      }\n    }),\n    _useProperty4 = (0, _slicedToArray2.default)(_useProperty3, 2),\n    selected = _useProperty4[0],\n    setSelected = _useProperty4[1];\n  var rowSelectionEnabled = (0, _isSelectionEnabled.default)(props);\n  var rowMultiSelectionEnabled = (0, _isMultiSelect.default)(props);\n  if (!rowSelectionEnabled) {\n    return {\n      selected: null,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n  if ((0, _isSelectionControlled.default)(props)) {\n    return {\n      selected: selected,\n      setSelected: setSelected,\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    };\n  }\n  if (rowMultiSelectionEnabled && ((0, _typeof2.default)(selected) != 'object' || !selected) && selected !== true) {\n    selected = EMPTY_OBJECT;\n  }\n  return {\n    selected: selected,\n    setSelected: setSelected,\n    rowSelectionEnabled: rowSelectionEnabled,\n    rowMultiSelectionEnabled: rowMultiSelectionEnabled\n  };\n};\nvar _default = function _default(props, computedProps, computedPropsRef) {\n  var _useSelected = useSelected(props, computedProps, computedPropsRef),\n    computedSelected = _useSelected.selected,\n    setSelected = _useSelected.setSelected,\n    rowMultiSelectionEnabled = _useSelected.rowMultiSelectionEnabled,\n    rowSelectionEnabled = _useSelected.rowSelectionEnabled;\n  var previousRowMultiSelectionEnabled = (0, _usePrevious.default)(rowMultiSelectionEnabled, rowMultiSelectionEnabled);\n  (0, _react.useEffect)(function () {\n    if (previousRowMultiSelectionEnabled === true && rowMultiSelectionEnabled === false) {\n      setSelected({});\n    }\n  }, [previousRowMultiSelectionEnabled, rowMultiSelectionEnabled]);\n  var computedRowSelectionEnabled = rowSelectionEnabled;\n  var computedRowMultiSelectionEnabled = rowMultiSelectionEnabled;\n  var _useUnselected = useUnselected(props, {\n      rowSelectionEnabled: rowSelectionEnabled,\n      rowMultiSelectionEnabled: rowMultiSelectionEnabled\n    }, computedPropsRef),\n    computedUnselected = _useUnselected.unselected,\n    setUnselected = _useUnselected.setUnselected;\n  var computedSelectedCount = getSelectedCountFromProps({\n    computedPagination: computedProps.computedPagination,\n    computedRemoteData: computedProps.computedRemoteData,\n    paginationCount: computedProps.paginationCount,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedSelected, computedUnselected);\n  var computedUnselectedCount = getUnselectedCountFromProps({\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedRowSelectionEnabled: computedRowSelectionEnabled\n  }, computedUnselected);\n  var isSelectionEmpty = (0, _react.useCallback)(function () {\n    var selected = computedSelected;\n    var selectionEmpty = false;\n    if (selected == null) {\n      selectionEmpty = true;\n    }\n    if ((0, _typeof2.default)(selected) === 'object' && selected !== null) {\n      selectionEmpty = Object.keys(selected).length === 0;\n    }\n    return selectionEmpty;\n  }, [computedSelected]);\n  var getSelectedMap = (0, _react.useCallback)(function () {\n    if (computedRowMultiSelectionEnabled) {\n      return computedSelected;\n    }\n    return (0, _defineProperty2.default)({}, computedSelected, true);\n  }, [computedRowMultiSelectionEnabled, computedSelected]);\n  var getUnselected = (0, _react.useCallback)(function () {\n    return getUnselectedFromProps(computedPropsRef.current);\n  }, []);\n  var getUnselectedMap = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return {};\n    }\n    var unselected = getUnselected();\n    if (computedProps.computedRowMultiSelectionEnabled) {\n      return unselected || {};\n    }\n    return {};\n  }, [getUnselected]);\n  var getUnselectedCount = function getUnselectedCount(unselected) {\n    return getUnselectedCountFromProps(computedPropsRef.current, unselected);\n  };\n  var getSelectedCount = function getSelectedCount(selected, unselected) {\n    return getSelectedCountFromProps(computedPropsRef.current, selected, unselected);\n  };\n  var isRowSelected = (0, _react.useCallback)(function (data) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return false;\n    }\n    if (typeof data == 'number') {\n      data = computedProps.getItemAt(data);\n    }\n    var selectedMap = getSelectedMap();\n    var id = computedProps.getItemId(data);\n    if (selectedMap === true) {\n      var unselectedMap = getUnselectedMap();\n      return !unselectedMap[id];\n    }\n    return !!selectedMap[id];\n  }, [getSelectedMap, getUnselectedMap]);\n  var cellSelectionTmp = props.cellSelection || props.defaultCellSelection;\n  var activeCellDefined = props.activeCell !== undefined || props.defaultActiveCell !== undefined;\n  var computedHasRowNavigation = (computedRowSelectionEnabled || !cellSelectionTmp) && computedProps.computedActiveIndex > -1 ? true : props.enableKeyboardNavigation !== false && !cellSelectionTmp && !activeCellDefined;\n  if (props.enableKeyboardNavigation === false) {\n    computedHasRowNavigation = false;\n  }\n  var _computedProps$useCel = computedProps.useCellSelection(props, {\n      rowSelectionEnabled: rowSelectionEnabled,\n      listenOnCellEnter: computedProps.listenOnCellEnter,\n      hasRowNavigation: computedHasRowNavigation\n    }, computedPropsRef),\n    computedCellSelection = _computedProps$useCel.computedCellSelection,\n    setCellSelection = _computedProps$useCel.setCellSelection,\n    computedCellSelectionEnabled = _computedProps$useCel.cellSelectionEnabled,\n    computedCellMultiSelectionEnabled = _computedProps$useCel.cellMultiSelectionEnabled,\n    computedCellNavigationEnabled = _computedProps$useCel.cellNavigationEnabled,\n    computedActiveCell = _computedProps$useCel.computedActiveCell,\n    incrementActiveCell = _computedProps$useCel.incrementActiveCell,\n    getCellSelectionIdKey = _computedProps$useCel.getCellSelectionIdKey,\n    getCellSelectionBetween = _computedProps$useCel.getCellSelectionBetween,\n    toggleActiveCellSelection = _computedProps$useCel.toggleActiveCellSelection,\n    onCellEnter = _computedProps$useCel.onCellEnter,\n    setActiveCell = _computedProps$useCel.setActiveCell,\n    getCellSelectionKey = _computedProps$useCel.getCellSelectionKey,\n    cellDragStartRowIndex = _computedProps$useCel.cellDragStartRowIndex,\n    setCellDragStartRowIndex = _computedProps$useCel.setCellDragStartRowIndex,\n    onCellSelectionDraggerMouseDown = _computedProps$useCel.onCellSelectionDraggerMouseDown,\n    computedCellBulkUpdateMouseDown = _computedProps$useCel.computedCellBulkUpdateMouseDown,\n    bulkUpdateMouseDown = _computedProps$useCel.bulkUpdateMouseDown,\n    computedCellBulkUpdateMouseUp = _computedProps$useCel.computedCellBulkUpdateMouseUp;\n  var selectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (!computedProps.computedRowSelectionEnabled) {\n      return;\n    }\n    var data = computedProps.data;\n    var dataMap = computedProps.dataMap;\n    if (computedProps.computedGroupBy) {\n      dataMap = {};\n      data = data.filter(function (d) {\n        var id = computedProps.getItemId(d);\n        if (!d.__group) {\n          dataMap[id] = id;\n          return true;\n        }\n      });\n    }\n    if (computedProps.computedTreeEnabled && computedProps.stickyTreeNodes) {\n      var vl = computedProps.getVirtualList();\n      vl.updateStickyRows(undefined, undefined, {\n        force: true\n      });\n    }\n    (0, _handleSelection.notifySelection)(computedProps, computedProps.computedRemoteData || computedProps.computedPagination ? data.length === 0 ? false : true : dataMap, data, null);\n  }, []);\n  var deselectAll = (0, _react.useCallback)(function () {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    if (computedProps.computedTreeEnabled && computedProps.stickyTreeNodes) {\n      var vl = computedProps.getVirtualList();\n      vl.updateStickyRows(undefined, undefined, {\n        force: true\n      });\n    }\n    (0, _handleSelection.notifySelection)(computedProps, {}, [], null);\n  }, []);\n  var setRowSelected = (0, _react.useCallback)(function (index, selected, event) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var queue = (0, _batchUpdate.default)();\n    if (computedProps.checkboxSelectEnableShiftKey && computedProps.computedRowMultiSelectionEnabled) {\n      if (event && event.target) {\n        var shiftKey = event.shiftKey,\n          metaKey = event.metaKey,\n          ctrlKey = event.ctrlKey;\n        if (shiftKey) {\n          var rowProps = {\n            data: computedProps.getItemAt(index),\n            rowIndex: index\n          };\n          (0, _handleSelection.handleSelection)(rowProps, computedProps, {\n            shiftKey: shiftKey,\n            metaKey: metaKey,\n            ctrlKey: ctrlKey\n          }, queue);\n          return;\n        }\n        computedProps.shiftKeyIndexRef.current = index;\n        computedProps.selectionIndexRef.current = index;\n      }\n    }\n    computedProps.setSelectedAt(index, selected, queue);\n    queue.commit();\n  }, [computedProps.initialProps.checkboxSelectEnableShiftKey]);\n  var setSelectedAt = (0, _react.useCallback)(function (index, selected, queue) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var data = computedProps.data[index];\n    if (!data) {\n      return;\n    }\n    var id = computedProps.getItemId(data);\n    computedProps.setSelectedById(id, selected, queue);\n  }, []);\n  var treeGridChildrenSelection = function treeGridChildrenSelection(dataArray, id, selected, clone, treeGridChildrenDeselectionEnabled, parentNode) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var idProperty = computedProps.idProperty;\n    var nodesName = computedProps.nodesProperty;\n    var pathSeparator = computedProps.nodePathSeparator;\n    var expandedNodes = computedProps.computedExpandedNodes || EMPTY_OBJECT;\n    var generateIdFromPath = computedProps.generateIdFromPath;\n    for (var i = 0; i < dataArray.length; i++) {\n      var item = dataArray[i];\n      if (item) {\n        var _id$split;\n        var itemId = item[idProperty];\n        var itemNodes = item[nodesName];\n        var parentNodeId = parentNode ? \"\".concat(parentNode[idProperty]) : undefined;\n        var path = parentNode ? \"\".concat(parentNodeId).concat(pathSeparator).concat(itemId) : \"\".concat(itemId);\n        if (generateIdFromPath) {\n          item[idProperty] = path;\n        }\n        var idLength = (_id$split = id.split(pathSeparator)) === null || _id$split === void 0 ? void 0 : _id$split.length;\n        var idFromPath = path.split(pathSeparator).slice(0, idLength).join(pathSeparator);\n        if (idFromPath === id) {\n          var treeData = computedProps.dataMap ? computedProps.dataMap[path] : null;\n          if (!treeData) {\n            continue;\n          }\n          if (selected) {\n            clone[path] = treeData;\n          } else {\n            if (treeGridChildrenDeselectionEnabled) {\n              delete clone[path];\n            } else {\n              delete clone[id];\n            }\n          }\n        }\n        if (expandedNodes && expandedNodes[idFromPath]) {\n          if (Array.isArray(itemNodes)) {\n            treeGridChildrenSelection(itemNodes, id, selected, clone, treeGridChildrenDeselectionEnabled, item);\n          }\n        }\n      }\n    }\n    return clone;\n  };\n  var setSelectedById = (0, _react.useCallback)(function (id, selected, queue) {\n    var computedProps = computedPropsRef.current;\n    if (!computedProps) {\n      return;\n    }\n    var data = computedProps.dataMap ? computedProps.dataMap[id] : null;\n    if (!data) {\n      return;\n    }\n    var isSelected = computedProps.isRowSelected(data);\n    var multiSelect = computedProps.computedRowMultiSelectionEnabled;\n    if (isSelected === selected) {\n      return;\n    }\n    if (multiSelect) {\n      var selectedMap = computedProps.computedSelected;\n      var unselectedMap = selectedMap === true ? computedProps.computedUnselected || {} : null;\n      var clone = selectedMap;\n      if (selectedMap === true) {\n        if (unselectedMap) {\n          unselectedMap = Object.assign({}, unselectedMap);\n        }\n        if (!selected && unselectedMap) {\n          unselectedMap[id] = true;\n          var totalCount = computedProps.paginationCount;\n          if (Object.keys(unselectedMap).length === totalCount) {\n            computedProps.deselectAll();\n            return;\n          }\n        } else {\n          if (unselectedMap) {\n            delete unselectedMap[id];\n          }\n          if (getUnselectedCountFromProps(computedProps, unselectedMap) === 0) {\n            unselectedMap = null;\n          }\n        }\n      } else {\n        clone = Object.assign({}, selectedMap);\n        if (computedProps.computedTreeEnabled && computedProps.treeGridChildrenSelectionEnabled) {\n          var originalData = JSON.stringify(computedProps.originalData || []);\n          var cloneOriginalData = (0, _toConsumableArray2.default)(JSON.parse(originalData));\n          var treeGridChildrenDeselectionEnabled = computedProps.treeGridChildrenDeselectionEnabled;\n          treeGridChildrenSelection(cloneOriginalData, id, selected, clone, treeGridChildrenDeselectionEnabled);\n        } else {\n          if (selected) {\n            clone[id] = data;\n          } else {\n            delete clone[id];\n          }\n        }\n      }\n      (0, _handleSelection.notifySelection)(computedProps, clone, data, unselectedMap, queue);\n    } else {\n      (0, _handleSelection.notifySelection)(computedProps, selected ? id : null, data, null, queue);\n    }\n  }, []);\n  return {\n    selectAll: selectAll,\n    deselectAll: deselectAll,\n    setRowSelected: setRowSelected,\n    setSelectedAt: setSelectedAt,\n    setSelectedById: setSelectedById,\n    setCellSelection: setCellSelection,\n    computedCellSelection: computedCellSelection,\n    computedCellSelectionEnabled: computedCellSelectionEnabled,\n    computedCellMultiSelectionEnabled: computedCellMultiSelectionEnabled,\n    computedCellNavigationEnabled: computedCellNavigationEnabled,\n    computedActiveCell: computedActiveCell,\n    getCellSelectionBetween: getCellSelectionBetween,\n    incrementActiveCell: incrementActiveCell,\n    cellDragStartRowIndex: cellDragStartRowIndex,\n    setCellDragStartRowIndex: setCellDragStartRowIndex,\n    onCellEnter: onCellEnter,\n    onCellSelectionDraggerMouseDown: onCellSelectionDraggerMouseDown,\n    toggleActiveCellSelection: toggleActiveCellSelection,\n    computedHasRowNavigation: computedHasRowNavigation,\n    computedRowSelectionEnabled: computedRowSelectionEnabled,\n    computedRowMultiSelectionEnabled: computedRowMultiSelectionEnabled,\n    computedSelected: computedSelected,\n    setSelected: setSelected,\n    computedUnselected: computedUnselected,\n    setUnselected: setUnselected,\n    isSelectionEmpty: isSelectionEmpty,\n    getSelectedMap: getSelectedMap,\n    getUnselectedMap: getUnselectedMap,\n    isRowSelected: isRowSelected,\n    getUnselectedCount: getUnselectedCount,\n    getSelectedCount: getSelectedCount,\n    computedUnselectedCount: computedUnselectedCount,\n    computedSelectedCount: computedSelectedCount,\n    getCellSelectionIdKey: getCellSelectionIdKey,\n    setActiveCell: setActiveCell,\n    getCellSelectionKey: getCellSelectionKey,\n    computedCellBulkUpdateMouseDown: computedCellBulkUpdateMouseDown,\n    computedCellBulkUpdateMouseUp: computedCellBulkUpdateMouseUp,\n    bulkUpdateMouseDown: bulkUpdateMouseDown\n  };\n};\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}