{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n  REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n  REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n  REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n  /**\n   * listen to Postgres changes.\n   */\n  REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n  REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n  REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n  REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n  REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nvar RealtimeChannel = /*#__PURE__*/function () {\n  function RealtimeChannel( /** Topic name can be any string. */\n  topic) {\n    var _this = this;\n    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      config: {}\n    };\n    var socket = arguments.length > 2 ? arguments[2] : undefined;\n    _classCallCheck(this, RealtimeChannel);\n    this.topic = topic;\n    this.params = params;\n    this.socket = socket;\n    this.bindings = {};\n    this.state = CHANNEL_STATES.closed;\n    this.joinedOnce = false;\n    this.pushBuffer = [];\n    this.params.config = Object.assign({\n      broadcast: {\n        ack: false,\n        self: false\n      },\n      presence: {\n        key: ''\n      }\n    }, params.config);\n    this.timeout = this.socket.timeout;\n    this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n    this.rejoinTimer = new Timer(function () {\n      return _this._rejoinUntilConnected();\n    }, this.socket.reconnectAfterMs);\n    this.joinPush.receive('ok', function () {\n      _this.state = CHANNEL_STATES.joined;\n      _this.rejoinTimer.reset();\n      _this.pushBuffer.forEach(function (pushEvent) {\n        return pushEvent.send();\n      });\n      _this.pushBuffer = [];\n    });\n    this._onClose(function () {\n      _this.rejoinTimer.reset();\n      _this.socket.log('channel', \"close \".concat(_this.topic, \" \").concat(_this._joinRef()));\n      _this.state = CHANNEL_STATES.closed;\n      _this.socket._remove(_this);\n    });\n    this._onError(function (reason) {\n      if (_this._isLeaving() || _this._isClosed()) {\n        return;\n      }\n      _this.socket.log('channel', \"error \".concat(_this.topic), reason);\n      _this.state = CHANNEL_STATES.errored;\n      _this.rejoinTimer.scheduleTimeout();\n    });\n    this.joinPush.receive('timeout', function () {\n      if (!_this._isJoining()) {\n        return;\n      }\n      _this.socket.log('channel', \"timeout \".concat(_this.topic), _this.joinPush.timeout);\n      _this.state = CHANNEL_STATES.errored;\n      _this.rejoinTimer.scheduleTimeout();\n    });\n    this._on(CHANNEL_EVENTS.reply, {}, function (payload, ref) {\n      _this._trigger(_this._replyEventName(ref), payload);\n    });\n    this.presence = new RealtimePresence(this);\n  }\n  /** Subscribe registers your client with the server */\n  _createClass(RealtimeChannel, [{\n    key: \"subscribe\",\n    value: function subscribe(callback) {\n      var _this2 = this;\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.timeout;\n      var _a, _b;\n      if (this.joinedOnce) {\n        throw \"tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance\";\n      } else {\n        var _this$params$config = this.params.config,\n          broadcast = _this$params$config.broadcast,\n          presence = _this$params$config.presence;\n        this._onError(function (e) {\n          return callback && callback('CHANNEL_ERROR', e);\n        });\n        this._onClose(function () {\n          return callback && callback('CLOSED');\n        });\n        var accessTokenPayload = {};\n        var config = {\n          broadcast: broadcast,\n          presence: presence,\n          postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map(function (r) {\n            return r.filter;\n          })) !== null && _b !== void 0 ? _b : []\n        };\n        if (this.socket.accessToken) {\n          accessTokenPayload.access_token = this.socket.accessToken;\n        }\n        this.updateJoinPayload(Object.assign({\n          config: config\n        }, accessTokenPayload));\n        this.joinedOnce = true;\n        this._rejoin(timeout);\n        this.joinPush.receive('ok', function (_ref2) {\n          var serverPostgresFilters = _ref2.postgres_changes;\n          var _a;\n          _this2.socket.accessToken && _this2.socket.setAuth(_this2.socket.accessToken);\n          if (serverPostgresFilters === undefined) {\n            callback && callback('SUBSCRIBED');\n            return;\n          } else {\n            var clientPostgresBindings = _this2.bindings.postgres_changes;\n            var bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n            var newPostgresBindings = [];\n            for (var i = 0; i < bindingsLen; i++) {\n              var clientPostgresBinding = clientPostgresBindings[i];\n              var _clientPostgresBindin = clientPostgresBinding.filter,\n                event = _clientPostgresBindin.event,\n                schema = _clientPostgresBindin.schema,\n                table = _clientPostgresBindin.table,\n                filter = _clientPostgresBindin.filter;\n              var serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n              if (serverPostgresFilter && serverPostgresFilter.event === event && serverPostgresFilter.schema === schema && serverPostgresFilter.table === table && serverPostgresFilter.filter === filter) {\n                newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), {\n                  id: serverPostgresFilter.id\n                }));\n              } else {\n                _this2.unsubscribe();\n                callback && callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n                return;\n              }\n            }\n            _this2.bindings.postgres_changes = newPostgresBindings;\n            callback && callback('SUBSCRIBED');\n            return;\n          }\n        }).receive('error', function (error) {\n          callback && callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n          return;\n        }).receive('timeout', function () {\n          callback && callback('TIMED_OUT');\n          return;\n        });\n      }\n      return this;\n    }\n  }, {\n    key: \"presenceState\",\n    value: function presenceState() {\n      return this.presence.state;\n    }\n  }, {\n    key: \"track\",\n    value: function track(payload) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.send({\n                type: 'presence',\n                event: 'track',\n                payload: payload\n              }, opts.timeout || this.timeout);\n            case 2:\n              return _context.abrupt(\"return\", _context.sent);\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"untrack\",\n    value: function untrack() {\n      var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this.send({\n                type: 'presence',\n                event: 'untrack'\n              }, opts);\n            case 2:\n              return _context2.abrupt(\"return\", _context2.sent);\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, filter, callback) {\n      return this._on(type, filter, callback);\n    }\n  }, {\n    key: \"send\",\n    value: function send(payload) {\n      var _this3 = this;\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Promise(function (resolve) {\n        var _a, _b, _c;\n        var push = _this3._push(payload.type, payload, opts.timeout || _this3.timeout);\n        if (push.rateLimited) {\n          resolve('rate limited');\n        }\n        if (payload.type === 'broadcast' && !((_c = (_b = (_a = _this3.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n          resolve('ok');\n        }\n        push.receive('ok', function () {\n          return resolve('ok');\n        });\n        push.receive('timeout', function () {\n          return resolve('timed out');\n        });\n      });\n    }\n  }, {\n    key: \"updateJoinPayload\",\n    value: function updateJoinPayload(payload) {\n      this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var _this4 = this;\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      this.state = CHANNEL_STATES.leaving;\n      var onClose = function onClose() {\n        _this4.socket.log('channel', \"leave \".concat(_this4.topic));\n        _this4._trigger(CHANNEL_EVENTS.close, 'leave', _this4._joinRef());\n      };\n      this.rejoinTimer.reset();\n      // Destroy joinPush to avoid connection timeouts during unscription phase\n      this.joinPush.destroy();\n      return new Promise(function (resolve) {\n        var leavePush = new Push(_this4, CHANNEL_EVENTS.leave, {}, timeout);\n        leavePush.receive('ok', function () {\n          onClose();\n          resolve('ok');\n        }).receive('timeout', function () {\n          onClose();\n          resolve('timed out');\n        }).receive('error', function () {\n          resolve('error');\n        });\n        leavePush.send();\n        if (!_this4._canPush()) {\n          leavePush.trigger('ok', {});\n        }\n      });\n    }\n    /** @internal */\n  }, {\n    key: \"_push\",\n    value: function _push(event, payload) {\n      var timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.timeout;\n      if (!this.joinedOnce) {\n        throw \"tried to push '\".concat(event, \"' to '\").concat(this.topic, \"' before joining. Use channel.subscribe() before pushing events\");\n      }\n      var pushEvent = new Push(this, event, payload, timeout);\n      if (this._canPush()) {\n        pushEvent.send();\n      } else {\n        pushEvent.startTimeout();\n        this.pushBuffer.push(pushEvent);\n      }\n      return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(_event, payload, _ref) {\n      return payload;\n    }\n    /** @internal */\n  }, {\n    key: \"_isMember\",\n    value: function _isMember(topic) {\n      return this.topic === topic;\n    }\n    /** @internal */\n  }, {\n    key: \"_joinRef\",\n    value: function _joinRef() {\n      return this.joinPush.ref;\n    }\n    /** @internal */\n  }, {\n    key: \"_trigger\",\n    value: function _trigger(type, payload, ref) {\n      var _this5 = this;\n      var _a, _b;\n      var typeLower = type.toLocaleLowerCase();\n      var close = CHANNEL_EVENTS.close,\n        error = CHANNEL_EVENTS.error,\n        leave = CHANNEL_EVENTS.leave,\n        join = CHANNEL_EVENTS.join;\n      var events = [close, error, leave, join];\n      if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n        return;\n      }\n      var handledPayload = this._onMessage(typeLower, payload, ref);\n      if (payload && !handledPayload) {\n        throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n      }\n      if (['insert', 'update', 'delete'].includes(typeLower)) {\n        (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter(function (bind) {\n          var _a, _b, _c;\n          return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\n        }).map(function (bind) {\n          return bind.callback(handledPayload, ref);\n        });\n      } else {\n        (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter(function (bind) {\n          var _a, _b, _c, _d, _e, _f;\n          if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n            if ('id' in bind) {\n              var bindId = bind.id;\n              var bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n              return bindId && ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) && (bindEvent === '*' || (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase()));\n            } else {\n              var _bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n              return _bindEvent === '*' || _bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\n            }\n          } else {\n            return bind.type.toLocaleLowerCase() === typeLower;\n          }\n        }).map(function (bind) {\n          if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n            var postgresChanges = handledPayload.data;\n            var schema = postgresChanges.schema,\n              table = postgresChanges.table,\n              commit_timestamp = postgresChanges.commit_timestamp,\n              _type = postgresChanges.type,\n              errors = postgresChanges.errors;\n            var enrichedPayload = {\n              schema: schema,\n              table: table,\n              commit_timestamp: commit_timestamp,\n              eventType: _type,\n              \"new\": {},\n              old: {},\n              errors: errors\n            };\n            handledPayload = Object.assign(Object.assign({}, enrichedPayload), _this5._getPayloadRecords(postgresChanges));\n          }\n          bind.callback(handledPayload, ref);\n        });\n      }\n    }\n    /** @internal */\n  }, {\n    key: \"_isClosed\",\n    value: function _isClosed() {\n      return this.state === CHANNEL_STATES.closed;\n    }\n    /** @internal */\n  }, {\n    key: \"_isJoined\",\n    value: function _isJoined() {\n      return this.state === CHANNEL_STATES.joined;\n    }\n    /** @internal */\n  }, {\n    key: \"_isJoining\",\n    value: function _isJoining() {\n      return this.state === CHANNEL_STATES.joining;\n    }\n    /** @internal */\n  }, {\n    key: \"_isLeaving\",\n    value: function _isLeaving() {\n      return this.state === CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n  }, {\n    key: \"_replyEventName\",\n    value: function _replyEventName(ref) {\n      return \"chan_reply_\".concat(ref);\n    }\n    /** @internal */\n  }, {\n    key: \"_on\",\n    value: function _on(type, filter, callback) {\n      var typeLower = type.toLocaleLowerCase();\n      var binding = {\n        type: typeLower,\n        filter: filter,\n        callback: callback\n      };\n      if (this.bindings[typeLower]) {\n        this.bindings[typeLower].push(binding);\n      } else {\n        this.bindings[typeLower] = [binding];\n      }\n      return this;\n    }\n    /** @internal */\n  }, {\n    key: \"_off\",\n    value: function _off(type, filter) {\n      var typeLower = type.toLocaleLowerCase();\n      this.bindings[typeLower] = this.bindings[typeLower].filter(function (bind) {\n        var _a;\n        return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower && RealtimeChannel.isEqual(bind.filter, filter));\n      });\n      return this;\n    }\n    /** @internal */\n  }, {\n    key: \"_rejoinUntilConnected\",\n    value: /** @internal */\n    function _rejoinUntilConnected() {\n      this.rejoinTimer.scheduleTimeout();\n      if (this.socket.isConnected()) {\n        this._rejoin();\n      }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onClose\",\n    value: function _onClose(callback) {\n      this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_onError\",\n    value: function _onError(callback) {\n      this._on(CHANNEL_EVENTS.error, {}, function (reason) {\n        return callback(reason);\n      });\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n  }, {\n    key: \"_canPush\",\n    value: function _canPush() {\n      return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n  }, {\n    key: \"_rejoin\",\n    value: function _rejoin() {\n      var timeout = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.timeout;\n      if (this._isLeaving()) {\n        return;\n      }\n      this.socket._leaveOpenTopic(this.topic);\n      this.state = CHANNEL_STATES.joining;\n      this.joinPush.resend(timeout);\n    }\n    /** @internal */\n  }, {\n    key: \"_getPayloadRecords\",\n    value: function _getPayloadRecords(payload) {\n      var records = {\n        \"new\": {},\n        old: {}\n      };\n      if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n        records[\"new\"] = Transformers.convertChangeData(payload.columns, payload.record);\n      }\n      if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n        records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n      }\n      return records;\n    }\n  }], [{\n    key: \"isEqual\",\n    value: function isEqual(obj1, obj2) {\n      if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n        return false;\n      }\n      for (var k in obj1) {\n        if (obj1[k] !== obj2[k]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }]);\n  return RealtimeChannel;\n}();\nexport { RealtimeChannel as default };","map":{"version":3,"sources":["../../src/RealtimeChannel.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { CHANNEL_EVENTS, CHANNEL_STATES } from './lib/constants';\nimport Push from './lib/push';\nimport Timer from './lib/timer';\nimport RealtimePresence from './RealtimePresence';\nimport * as Transformers from './lib/transformers';\nexport var REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\nexport var REALTIME_LISTEN_TYPES;\n(function (REALTIME_LISTEN_TYPES) {\n    REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\n    REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\n    /**\n     * listen to Postgres changes.\n     */\n    REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\nexport var REALTIME_SUBSCRIBE_STATES;\n(function (REALTIME_SUBSCRIBE_STATES) {\n    REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\n    REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\n    REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\n    REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\n/** A channel is the basic building block of Realtime\n * and narrows the scope of data flow to subscribed clients.\n * You can think of a channel as a chatroom where participants are able to see who's online\n * and send and receive messages.\n **/\nexport default class RealtimeChannel {\n    constructor(\n    /** Topic name can be any string. */\n    topic, params = { config: {} }, socket) {\n        this.topic = topic;\n        this.params = params;\n        this.socket = socket;\n        this.bindings = {};\n        this.state = CHANNEL_STATES.closed;\n        this.joinedOnce = false;\n        this.pushBuffer = [];\n        this.params.config = Object.assign({\n            broadcast: { ack: false, self: false },\n            presence: { key: '' },\n        }, params.config);\n        this.timeout = this.socket.timeout;\n        this.joinPush = new Push(this, CHANNEL_EVENTS.join, this.params, this.timeout);\n        this.rejoinTimer = new Timer(() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\n        this.joinPush.receive('ok', () => {\n            this.state = CHANNEL_STATES.joined;\n            this.rejoinTimer.reset();\n            this.pushBuffer.forEach((pushEvent) => pushEvent.send());\n            this.pushBuffer = [];\n        });\n        this._onClose(() => {\n            this.rejoinTimer.reset();\n            this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\n            this.state = CHANNEL_STATES.closed;\n            this.socket._remove(this);\n        });\n        this._onError((reason) => {\n            if (this._isLeaving() || this._isClosed()) {\n                return;\n            }\n            this.socket.log('channel', `error ${this.topic}`, reason);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this.joinPush.receive('timeout', () => {\n            if (!this._isJoining()) {\n                return;\n            }\n            this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\n            this.state = CHANNEL_STATES.errored;\n            this.rejoinTimer.scheduleTimeout();\n        });\n        this._on(CHANNEL_EVENTS.reply, {}, (payload, ref) => {\n            this._trigger(this._replyEventName(ref), payload);\n        });\n        this.presence = new RealtimePresence(this);\n    }\n    /** Subscribe registers your client with the server */\n    subscribe(callback, timeout = this.timeout) {\n        var _a, _b;\n        if (this.joinedOnce) {\n            throw `tried to subscribe multiple times. 'subscribe' can only be called a single time per channel instance`;\n        }\n        else {\n            const { config: { broadcast, presence }, } = this.params;\n            this._onError((e) => callback && callback('CHANNEL_ERROR', e));\n            this._onClose(() => callback && callback('CLOSED'));\n            const accessTokenPayload = {};\n            const config = {\n                broadcast,\n                presence,\n                postgres_changes: (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [],\n            };\n            if (this.socket.accessToken) {\n                accessTokenPayload.access_token = this.socket.accessToken;\n            }\n            this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));\n            this.joinedOnce = true;\n            this._rejoin(timeout);\n            this.joinPush\n                .receive('ok', ({ postgres_changes: serverPostgresFilters, }) => {\n                var _a;\n                this.socket.accessToken &&\n                    this.socket.setAuth(this.socket.accessToken);\n                if (serverPostgresFilters === undefined) {\n                    callback && callback('SUBSCRIBED');\n                    return;\n                }\n                else {\n                    const clientPostgresBindings = this.bindings.postgres_changes;\n                    const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\n                    const newPostgresBindings = [];\n                    for (let i = 0; i < bindingsLen; i++) {\n                        const clientPostgresBinding = clientPostgresBindings[i];\n                        const { filter: { event, schema, table, filter }, } = clientPostgresBinding;\n                        const serverPostgresFilter = serverPostgresFilters && serverPostgresFilters[i];\n                        if (serverPostgresFilter &&\n                            serverPostgresFilter.event === event &&\n                            serverPostgresFilter.schema === schema &&\n                            serverPostgresFilter.table === table &&\n                            serverPostgresFilter.filter === filter) {\n                            newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));\n                        }\n                        else {\n                            this.unsubscribe();\n                            callback &&\n                                callback('CHANNEL_ERROR', new Error('mismatch between server and client bindings for postgres changes'));\n                            return;\n                        }\n                    }\n                    this.bindings.postgres_changes = newPostgresBindings;\n                    callback && callback('SUBSCRIBED');\n                    return;\n                }\n            })\n                .receive('error', (error) => {\n                callback &&\n                    callback('CHANNEL_ERROR', new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\n                return;\n            })\n                .receive('timeout', () => {\n                callback && callback('TIMED_OUT');\n                return;\n            });\n        }\n        return this;\n    }\n    presenceState() {\n        return this.presence.state;\n    }\n    track(payload, opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.send({\n                type: 'presence',\n                event: 'track',\n                payload,\n            }, opts.timeout || this.timeout);\n        });\n    }\n    untrack(opts = {}) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield this.send({\n                type: 'presence',\n                event: 'untrack',\n            }, opts);\n        });\n    }\n    on(type, filter, callback) {\n        return this._on(type, filter, callback);\n    }\n    send(payload, opts = {}) {\n        return new Promise((resolve) => {\n            var _a, _b, _c;\n            const push = this._push(payload.type, payload, opts.timeout || this.timeout);\n            if (push.rateLimited) {\n                resolve('rate limited');\n            }\n            if (payload.type === 'broadcast' &&\n                !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\n                resolve('ok');\n            }\n            push.receive('ok', () => resolve('ok'));\n            push.receive('timeout', () => resolve('timed out'));\n        });\n    }\n    updateJoinPayload(payload) {\n        this.joinPush.updatePayload(payload);\n    }\n    /**\n     * Leaves the channel.\n     *\n     * Unsubscribes from server events, and instructs channel to terminate on server.\n     * Triggers onClose() hooks.\n     *\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\n     */\n    unsubscribe(timeout = this.timeout) {\n        this.state = CHANNEL_STATES.leaving;\n        const onClose = () => {\n            this.socket.log('channel', `leave ${this.topic}`);\n            this._trigger(CHANNEL_EVENTS.close, 'leave', this._joinRef());\n        };\n        this.rejoinTimer.reset();\n        // Destroy joinPush to avoid connection timeouts during unscription phase\n        this.joinPush.destroy();\n        return new Promise((resolve) => {\n            const leavePush = new Push(this, CHANNEL_EVENTS.leave, {}, timeout);\n            leavePush\n                .receive('ok', () => {\n                onClose();\n                resolve('ok');\n            })\n                .receive('timeout', () => {\n                onClose();\n                resolve('timed out');\n            })\n                .receive('error', () => {\n                resolve('error');\n            });\n            leavePush.send();\n            if (!this._canPush()) {\n                leavePush.trigger('ok', {});\n            }\n        });\n    }\n    /** @internal */\n    _push(event, payload, timeout = this.timeout) {\n        if (!this.joinedOnce) {\n            throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\n        }\n        let pushEvent = new Push(this, event, payload, timeout);\n        if (this._canPush()) {\n            pushEvent.send();\n        }\n        else {\n            pushEvent.startTimeout();\n            this.pushBuffer.push(pushEvent);\n        }\n        return pushEvent;\n    }\n    /**\n     * Overridable message hook\n     *\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\n     * Must return the payload, modified or unmodified.\n     *\n     * @internal\n     */\n    _onMessage(_event, payload, _ref) {\n        return payload;\n    }\n    /** @internal */\n    _isMember(topic) {\n        return this.topic === topic;\n    }\n    /** @internal */\n    _joinRef() {\n        return this.joinPush.ref;\n    }\n    /** @internal */\n    _trigger(type, payload, ref) {\n        var _a, _b;\n        const typeLower = type.toLocaleLowerCase();\n        const { close, error, leave, join } = CHANNEL_EVENTS;\n        const events = [close, error, leave, join];\n        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\n            return;\n        }\n        let handledPayload = this._onMessage(typeLower, payload, ref);\n        if (payload && !handledPayload) {\n            throw 'channel onMessage callbacks must return the payload, modified or unmodified';\n        }\n        if (['insert', 'update', 'delete'].includes(typeLower)) {\n            (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {\n                var _a, _b, _c;\n                return (((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' ||\n                    ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower);\n            }).map((bind) => bind.callback(handledPayload, ref));\n        }\n        else {\n            (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {\n                var _a, _b, _c, _d, _e, _f;\n                if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\n                    if ('id' in bind) {\n                        const bindId = bind.id;\n                        const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\n                        return (bindId &&\n                            ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) &&\n                            (bindEvent === '*' ||\n                                (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) ===\n                                    ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase())));\n                    }\n                    else {\n                        const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\n                        return (bindEvent === '*' ||\n                            bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase()));\n                    }\n                }\n                else {\n                    return bind.type.toLocaleLowerCase() === typeLower;\n                }\n            }).map((bind) => {\n                if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\n                    const postgresChanges = handledPayload.data;\n                    const { schema, table, commit_timestamp, type, errors } = postgresChanges;\n                    const enrichedPayload = {\n                        schema: schema,\n                        table: table,\n                        commit_timestamp: commit_timestamp,\n                        eventType: type,\n                        new: {},\n                        old: {},\n                        errors: errors,\n                    };\n                    handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\n                }\n                bind.callback(handledPayload, ref);\n            });\n        }\n    }\n    /** @internal */\n    _isClosed() {\n        return this.state === CHANNEL_STATES.closed;\n    }\n    /** @internal */\n    _isJoined() {\n        return this.state === CHANNEL_STATES.joined;\n    }\n    /** @internal */\n    _isJoining() {\n        return this.state === CHANNEL_STATES.joining;\n    }\n    /** @internal */\n    _isLeaving() {\n        return this.state === CHANNEL_STATES.leaving;\n    }\n    /** @internal */\n    _replyEventName(ref) {\n        return `chan_reply_${ref}`;\n    }\n    /** @internal */\n    _on(type, filter, callback) {\n        const typeLower = type.toLocaleLowerCase();\n        const binding = {\n            type: typeLower,\n            filter: filter,\n            callback: callback,\n        };\n        if (this.bindings[typeLower]) {\n            this.bindings[typeLower].push(binding);\n        }\n        else {\n            this.bindings[typeLower] = [binding];\n        }\n        return this;\n    }\n    /** @internal */\n    _off(type, filter) {\n        const typeLower = type.toLocaleLowerCase();\n        this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\n            var _a;\n            return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower &&\n                RealtimeChannel.isEqual(bind.filter, filter));\n        });\n        return this;\n    }\n    /** @internal */\n    static isEqual(obj1, obj2) {\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\n            return false;\n        }\n        for (const k in obj1) {\n            if (obj1[k] !== obj2[k]) {\n                return false;\n            }\n        }\n        return true;\n    }\n    /** @internal */\n    _rejoinUntilConnected() {\n        this.rejoinTimer.scheduleTimeout();\n        if (this.socket.isConnected()) {\n            this._rejoin();\n        }\n    }\n    /**\n     * Registers a callback that will be executed when the channel closes.\n     *\n     * @internal\n     */\n    _onClose(callback) {\n        this._on(CHANNEL_EVENTS.close, {}, callback);\n    }\n    /**\n     * Registers a callback that will be executed when the channel encounteres an error.\n     *\n     * @internal\n     */\n    _onError(callback) {\n        this._on(CHANNEL_EVENTS.error, {}, (reason) => callback(reason));\n    }\n    /**\n     * Returns `true` if the socket is connected and the channel has been joined.\n     *\n     * @internal\n     */\n    _canPush() {\n        return this.socket.isConnected() && this._isJoined();\n    }\n    /** @internal */\n    _rejoin(timeout = this.timeout) {\n        if (this._isLeaving()) {\n            return;\n        }\n        this.socket._leaveOpenTopic(this.topic);\n        this.state = CHANNEL_STATES.joining;\n        this.joinPush.resend(timeout);\n    }\n    /** @internal */\n    _getPayloadRecords(payload) {\n        const records = {\n            new: {},\n            old: {},\n        };\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\n            records.new = Transformers.convertChangeData(payload.columns, payload.record);\n        }\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\n            records.old = Transformers.convertChangeData(payload.columns, payload.old_record);\n        }\n        return records;\n    }\n}\n//# sourceMappingURL=RealtimeChannel.js.map"]},"metadata":{},"sourceType":"module"}