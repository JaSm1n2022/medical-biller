{"ast":null,"code":"import _regeneratorRuntime from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove as _remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nvar DEFAULT_SEARCH_OPTIONS = {\n  limit: 100,\n  offset: 0,\n  sortBy: {\n    column: 'name',\n    order: 'asc'\n  }\n};\nvar DEFAULT_FILE_OPTIONS = {\n  cacheControl: '3600',\n  contentType: 'text/plain;charset=UTF-8',\n  upsert: false\n};\nvar StorageFileApi = /*#__PURE__*/function () {\n  function StorageFileApi(url) {\n    var headers = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var bucketId = arguments.length > 2 ? arguments[2] : undefined;\n    var fetch = arguments.length > 3 ? arguments[3] : undefined;\n    _classCallCheck(this, StorageFileApi);\n    this.url = url;\n    this.headers = headers;\n    this.bucketId = bucketId;\n    this.fetch = resolveFetch(fetch);\n  }\n  /**\n   * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n   *\n   * @param method HTTP method.\n   * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n   * @param fileBody The body of the file to be stored in the bucket.\n   */\n  _createClass(StorageFileApi, [{\n    key: \"uploadOrUpdate\",\n    value: function uploadOrUpdate(method, path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var body, options, headers, cleanPath, _path, res, error;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n              headers = Object.assign(Object.assign({}, this.headers), method === 'POST' && {\n                'x-upsert': String(options.upsert)\n              });\n              if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                body = new FormData();\n                body.append('cacheControl', options.cacheControl);\n                body.append('', fileBody);\n              } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                body = fileBody;\n                body.append('cacheControl', options.cacheControl);\n              } else {\n                body = fileBody;\n                headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                headers['content-type'] = options.contentType;\n              }\n              cleanPath = this._removeEmptyFolders(path);\n              _path = this._getFinalPath(cleanPath);\n              _context.next = 8;\n              return this.fetch(\"\".concat(this.url, \"/object/\").concat(_path), Object.assign({\n                method: method,\n                body: body,\n                headers: headers\n              }, (options === null || options === void 0 ? void 0 : options.duplex) ? {\n                duplex: options.duplex\n              } : {}));\n            case 8:\n              res = _context.sent;\n              if (!res.ok) {\n                _context.next = 13;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                data: {\n                  path: cleanPath\n                },\n                error: null\n              });\n            case 13:\n              _context.next = 15;\n              return res.json();\n            case 15:\n              error = _context.sent;\n              return _context.abrupt(\"return\", {\n                data: null,\n                error: error\n              });\n            case 17:\n              _context.next = 24;\n              break;\n            case 19:\n              _context.prev = 19;\n              _context.t0 = _context[\"catch\"](0);\n              if (!isStorageError(_context.t0)) {\n                _context.next = 23;\n                break;\n              }\n              return _context.abrupt(\"return\", {\n                data: null,\n                error: _context.t0\n              });\n            case 23:\n              throw _context.t0;\n            case 24:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 19]]);\n      }));\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"upload\",\n    value: function upload(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this.uploadOrUpdate('POST', path, fileBody, fileOptions));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"uploadToSignedUrl\",\n    value: function uploadToSignedUrl(path, token, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var cleanPath, _path, url, body, options, headers, res, error;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              cleanPath = this._removeEmptyFolders(path);\n              _path = this._getFinalPath(cleanPath);\n              url = new URL(this.url + \"/object/upload/sign/\".concat(_path));\n              url.searchParams.set('token', token);\n              _context3.prev = 4;\n              options = Object.assign({\n                upsert: DEFAULT_FILE_OPTIONS.upsert\n              }, fileOptions);\n              headers = Object.assign(Object.assign({}, this.headers), {\n                'x-upsert': String(options.upsert)\n              });\n              if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                body = new FormData();\n                body.append('cacheControl', options.cacheControl);\n                body.append('', fileBody);\n              } else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                body = fileBody;\n                body.append('cacheControl', options.cacheControl);\n              } else {\n                body = fileBody;\n                headers['cache-control'] = \"max-age=\".concat(options.cacheControl);\n                headers['content-type'] = options.contentType;\n              }\n              _context3.next = 10;\n              return this.fetch(url.toString(), {\n                method: 'PUT',\n                body: body,\n                headers: headers\n              });\n            case 10:\n              res = _context3.sent;\n              if (!res.ok) {\n                _context3.next = 15;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: {\n                  path: cleanPath\n                },\n                error: null\n              });\n            case 15:\n              _context3.next = 17;\n              return res.json();\n            case 17:\n              error = _context3.sent;\n              return _context3.abrupt(\"return\", {\n                data: null,\n                error: error\n              });\n            case 19:\n              _context3.next = 26;\n              break;\n            case 21:\n              _context3.prev = 21;\n              _context3.t0 = _context3[\"catch\"](4);\n              if (!isStorageError(_context3.t0)) {\n                _context3.next = 25;\n                break;\n              }\n              return _context3.abrupt(\"return\", {\n                data: null,\n                error: _context3.t0\n              });\n            case 25:\n              throw _context3.t0;\n            case 26:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[4, 21]]);\n      }));\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for one minute.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     */\n  }, {\n    key: \"createSignedUploadUrl\",\n    value: function createSignedUploadUrl(path) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _path, data, url, token;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              _path = this._getFinalPath(path);\n              _context4.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/upload/sign/\").concat(_path), {}, {\n                headers: this.headers\n              });\n            case 4:\n              data = _context4.sent;\n              url = new URL(this.url + data.url);\n              token = url.searchParams.get('token');\n              if (token) {\n                _context4.next = 9;\n                break;\n              }\n              throw new StorageError('No token returned by API');\n            case 9:\n              return _context4.abrupt(\"return\", {\n                data: {\n                  signedUrl: url.toString(),\n                  path: path,\n                  token: token\n                },\n                error: null\n              });\n            case 12:\n              _context4.prev = 12;\n              _context4.t0 = _context4[\"catch\"](0);\n              if (!isStorageError(_context4.t0)) {\n                _context4.next = 16;\n                break;\n              }\n              return _context4.abrupt(\"return\", {\n                data: null,\n                error: _context4.t0\n              });\n            case 16:\n              throw _context4.t0;\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 12]]);\n      }));\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n  }, {\n    key: \"update\",\n    value: function update(path, fileBody, fileOptions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this.uploadOrUpdate('PUT', path, fileBody, fileOptions));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n  }, {\n    key: \"move\",\n    value: function move(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.prev = 0;\n              _context6.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/move\"), {\n                bucketId: this.bucketId,\n                sourceKey: fromPath,\n                destinationKey: toPath\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context6.sent;\n              return _context6.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 7:\n              _context6.prev = 7;\n              _context6.t0 = _context6[\"catch\"](0);\n              if (!isStorageError(_context6.t0)) {\n                _context6.next = 11;\n                break;\n              }\n              return _context6.abrupt(\"return\", {\n                data: null,\n                error: _context6.t0\n              });\n            case 11:\n              throw _context6.t0;\n            case 12:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy(fromPath, toPath) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.prev = 0;\n              _context7.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/copy\"), {\n                bucketId: this.bucketId,\n                sourceKey: fromPath,\n                destinationKey: toPath\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context7.sent;\n              return _context7.abrupt(\"return\", {\n                data: {\n                  path: data.Key\n                },\n                error: null\n              });\n            case 7:\n              _context7.prev = 7;\n              _context7.t0 = _context7[\"catch\"](0);\n              if (!isStorageError(_context7.t0)) {\n                _context7.next = 11;\n                break;\n              }\n              return _context7.abrupt(\"return\", {\n                data: null,\n                error: _context7.t0\n              });\n            case 11:\n              throw _context7.t0;\n            case 12:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"createSignedUrl\",\n    value: function createSignedUrl(path, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var _path, data, downloadQueryParam, signedUrl;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.prev = 0;\n              _path = this._getFinalPath(path);\n              _context8.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(_path), Object.assign({\n                expiresIn: expiresIn\n              }, (options === null || options === void 0 ? void 0 : options.transform) ? {\n                transform: options.transform\n              } : {}), {\n                headers: this.headers\n              });\n            case 4:\n              data = _context8.sent;\n              downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n              signedUrl = encodeURI(\"\".concat(this.url).concat(data.signedURL).concat(downloadQueryParam));\n              data = {\n                signedUrl: signedUrl\n              };\n              return _context8.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 11:\n              _context8.prev = 11;\n              _context8.t0 = _context8[\"catch\"](0);\n              if (!isStorageError(_context8.t0)) {\n                _context8.next = 15;\n                break;\n              }\n              return _context8.abrupt(\"return\", {\n                data: null,\n                error: _context8.t0\n              });\n            case 15:\n              throw _context8.t0;\n            case 16:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this, [[0, 11]]);\n      }));\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n  }, {\n    key: \"createSignedUrls\",\n    value: function createSignedUrls(paths, expiresIn, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        var _this = this;\n        var data, downloadQueryParam;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.prev = 0;\n              _context9.next = 3;\n              return post(this.fetch, \"\".concat(this.url, \"/object/sign/\").concat(this.bucketId), {\n                expiresIn: expiresIn,\n                paths: paths\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context9.sent;\n              downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"&download=\".concat(options.download === true ? '' : options.download) : '';\n              return _context9.abrupt(\"return\", {\n                data: data.map(function (datum) {\n                  return Object.assign(Object.assign({}, datum), {\n                    signedUrl: datum.signedURL ? encodeURI(\"\".concat(_this.url).concat(datum.signedURL).concat(downloadQueryParam)) : null\n                  });\n                }),\n                error: null\n              });\n            case 8:\n              _context9.prev = 8;\n              _context9.t0 = _context9[\"catch\"](0);\n              if (!isStorageError(_context9.t0)) {\n                _context9.next = 12;\n                break;\n              }\n              return _context9.abrupt(\"return\", {\n                data: null,\n                error: _context9.t0\n              });\n            case 12:\n              throw _context9.t0;\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this, [[0, 8]]);\n      }));\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"download\",\n    value: function download(path, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        var wantsTransformation, renderPath, transformationQuery, queryString, _path, res, data;\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n              renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n              transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n              queryString = transformationQuery ? \"?\".concat(transformationQuery) : '';\n              _context10.prev = 4;\n              _path = this._getFinalPath(path);\n              _context10.next = 8;\n              return get(this.fetch, \"\".concat(this.url, \"/\").concat(renderPath, \"/\").concat(_path).concat(queryString), {\n                headers: this.headers,\n                noResolveJson: true\n              });\n            case 8:\n              res = _context10.sent;\n              _context10.next = 11;\n              return res.blob();\n            case 11:\n              data = _context10.sent;\n              return _context10.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 15:\n              _context10.prev = 15;\n              _context10.t0 = _context10[\"catch\"](4);\n              if (!isStorageError(_context10.t0)) {\n                _context10.next = 19;\n                break;\n              }\n              return _context10.abrupt(\"return\", {\n                data: null,\n                error: _context10.t0\n              });\n            case 19:\n              throw _context10.t0;\n            case 20:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10, this, [[4, 15]]);\n      }));\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n  }, {\n    key: \"getPublicUrl\",\n    value: function getPublicUrl(path, options) {\n      var _path = this._getFinalPath(path);\n      var _queryString = [];\n      var downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download) ? \"download=\".concat(options.download === true ? '' : options.download) : '';\n      if (downloadQueryParam !== '') {\n        _queryString.push(downloadQueryParam);\n      }\n      var wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n      var renderPath = wantsTransformation ? 'render/image' : 'object';\n      var transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n      if (transformationQuery !== '') {\n        _queryString.push(transformationQuery);\n      }\n      var queryString = _queryString.join('&');\n      if (queryString !== '') {\n        queryString = \"?\".concat(queryString);\n      }\n      return {\n        data: {\n          publicUrl: encodeURI(\"\".concat(this.url, \"/\").concat(renderPath, \"/public/\").concat(_path).concat(queryString))\n        }\n      };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(paths) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n        var data;\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.prev = 0;\n              _context11.next = 3;\n              return _remove(this.fetch, \"\".concat(this.url, \"/object/\").concat(this.bucketId), {\n                prefixes: paths\n              }, {\n                headers: this.headers\n              });\n            case 3:\n              data = _context11.sent;\n              return _context11.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 7:\n              _context11.prev = 7;\n              _context11.t0 = _context11[\"catch\"](0);\n              if (!isStorageError(_context11.t0)) {\n                _context11.next = 11;\n                break;\n              }\n              return _context11.abrupt(\"return\", {\n                data: null,\n                error: _context11.t0\n              });\n            case 11:\n              throw _context11.t0;\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this, [[0, 7]]);\n      }));\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n  }, {\n    key: \"list\",\n    value: function list(path, options, parameters) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n        var body, data;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.prev = 0;\n              body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), {\n                prefix: path || ''\n              });\n              _context12.next = 4;\n              return post(this.fetch, \"\".concat(this.url, \"/object/list/\").concat(this.bucketId), body, {\n                headers: this.headers\n              }, parameters);\n            case 4:\n              data = _context12.sent;\n              return _context12.abrupt(\"return\", {\n                data: data,\n                error: null\n              });\n            case 8:\n              _context12.prev = 8;\n              _context12.t0 = _context12[\"catch\"](0);\n              if (!isStorageError(_context12.t0)) {\n                _context12.next = 12;\n                break;\n              }\n              return _context12.abrupt(\"return\", {\n                data: null,\n                error: _context12.t0\n              });\n            case 12:\n              throw _context12.t0;\n            case 13:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this, [[0, 8]]);\n      }));\n    }\n  }, {\n    key: \"_getFinalPath\",\n    value: function _getFinalPath(path) {\n      return \"\".concat(this.bucketId, \"/\").concat(path);\n    }\n  }, {\n    key: \"_removeEmptyFolders\",\n    value: function _removeEmptyFolders(path) {\n      return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n  }, {\n    key: \"transformOptsToQueryString\",\n    value: function transformOptsToQueryString(transform) {\n      var params = [];\n      if (transform.width) {\n        params.push(\"width=\".concat(transform.width));\n      }\n      if (transform.height) {\n        params.push(\"height=\".concat(transform.height));\n      }\n      if (transform.resize) {\n        params.push(\"resize=\".concat(transform.resize));\n      }\n      if (transform.format) {\n        params.push(\"format=\".concat(transform.format));\n      }\n      if (transform.quality) {\n        params.push(\"quality=\".concat(transform.quality));\n      }\n      return params.join('&');\n    }\n  }]);\n  return StorageFileApi;\n}();\nexport { StorageFileApi as default };","map":{"version":3,"sources":["../../../src/packages/StorageFileApi.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAAS,cAAc,EAAE,YAAY,QAAQ,eAAe;AAC5D,SAAgB,GAAG,EAAE,IAAI,EAAE,MAAM,IAAN,OAAM,QAAQ,cAAc;AACvD,SAAS,YAAY,QAAQ,gBAAgB;AAS7C,IAAM,sBAAsB,GAAG;EAC7B,KAAK,EAAE,GAAG;EACV,MAAM,EAAE,CAAC;EACT,MAAM,EAAE;IACN,MAAM,EAAE,MAAM;IACd,KAAK,EAAE;EACR;CACF;AAED,IAAM,oBAAoB,GAAgB;EACxC,YAAY,EAAE,MAAM;EACpB,WAAW,EAAE,0BAA0B;EACvC,MAAM,EAAE;CACT;AAAA,IAcoB,cAAc;EAMjC,SAAA,eACE,GAAW,EAGE;IAAA,IAFb,OAAA,GAAA,SAAA,CAAA,MAAA,QAAA,SAAA,QAAA,SAAA,GAAA,SAAA,MAAqC,CAAA,CAAE;IAAA,IACvC,QAAiB,GAAA,SAAA,CAAA,MAAA,OAAA,SAAA,MAAA,SAAA;IAAA,IACjB,KAAa,GAAA,SAAA,CAAA,MAAA,OAAA,SAAA,MAAA,SAAA;IAAA,eAAA,OAAA,cAAA;IAEb,IAAI,CAAC,GAAG,GAAG,GAAG;IACd,IAAI,CAAC,OAAO,GAAG,OAAO;IACtB,IAAI,CAAC,QAAQ,GAAG,QAAQ;IACxB,IAAI,CAAC,KAAK,GAAG,YAAY,CAAC,KAAK,CAAC;EAClC;EAEA;;;;;;AAMG;EANH,YAAA,CAAA,cAAA;IAAA,GAAA;IAAA,KAAA,EAOc,SAAA,eACZ,MAAsB,EACtB,IAAY,EACZ,QAAkB,EAClB,WAAyB,EAAA;;;;;;;cAajB,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAQ,oBAAoB,CAAA,EAAK,WAAW,CAAE;cACrD,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACR,IAAI,CAAC,OAAO,CAAA,EACX,MAAM,KAAK,MAAM,IAAI;gBAAE,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC,MAAiB;cAAC,CAAG,CAC5E;cAED,IAAI,OAAO,IAAI,KAAK,WAAW,IAAI,QAAQ,YAAY,IAAI,EAAE;gBAC3D,IAAI,GAAG,IAAI,QAAQ,CAAA,CAAE;gBACrB,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,YAAsB,CAAC;gBAC3D,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC;eAC1B,MAAM,IAAI,OAAO,QAAQ,KAAK,WAAW,IAAI,QAAQ,YAAY,QAAQ,EAAE;gBAC1E,IAAI,GAAG,QAAQ;gBACf,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,YAAsB,CAAC;eAC5D,MAAM;gBACL,IAAI,GAAG,QAAQ;gBACf,OAAO,CAAC,eAAe,CAAC,cAAA,MAAA,CAAc,OAAO,CAAC,YAAY,CAAE;gBAC5D,OAAO,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC,WAAqB;cACxD;cAEK,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;cAC1C,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC;cAAA,QAAA,CAAA,IAAA;cAC/B,OAAM,IAAI,CAAC,KAAK,IAAA,MAAA,CAAI,IAAI,CAAC,GAAG,cAAA,MAAA,CAAW,KAAK,GAAE,MAAA,CAAA,MAAA,CAAA;gBACxD,MAAM,EAAN,MAAM;gBACN,IAAI,EAAE,IAAgB;gBACtB,OAAO,EAAP;cAAO,CAAA,EACH,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,MAAM,IAAG;gBAAE,MAAM,EAAE,OAAO,CAAC;cAAM,CAAE,GAAG,CAAA,CAAG,CAAA,CACtD;YAAA;cALI,GAAG,GAAA,QAAA,CAAA,IAAA;cAAA,KAOL,GAAG,CAAC,EAAE;gBAAA,QAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WACD;gBACL,IAAI,EAAE;kBAAE,IAAI,EAAE;gBAAS,CAAE;gBACzB,KAAK,EAAE;eACR;YAAA;cAAA,QAAA,CAAA,IAAA;cAEa,OAAM,GAAG,CAAC,IAAI,CAAA,CAAE;YAAA;cAAxB,KAAK,GAAA,QAAA,CAAA,IAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WACJ;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAL;cAAK,CAAE;YAAA;cAAA,QAAA,CAAA,IAAA;cAAA;YAAA;cAAA,QAAA,CAAA,IAAA;cAAA,QAAA,CAAA,EAAA,GAAA,QAAA;cAAA,KAG1B,cAAc,CAAA,QAAA,CAAA,EAAM,CAAC;gBAAA,QAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,QAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,QAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,QAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,QAAA,CAAA,IAAA;UAAA;QAAA,GAAA,OAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;;;AAKG;EALH;IAAA,GAAA;IAAA,KAAA,EAMM,SAAA,OACJ,IAAY,EACZ,QAAkB,EAClB,WAAyB,EAAA;;;;;gDAWlB,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,CAAC;YAAA;YAAA;cAAA,OAAA,SAAA,CAAA,IAAA;UAAA;QAAA,GAAA,QAAA;MAAA,CAChE,EAAA;IAAA;IAED;;;;;AAKG;EALH;IAAA,GAAA;IAAA,KAAA,EAMM,SAAA,kBACJ,IAAY,EACZ,KAAa,EACb,QAAkB,EAClB,WAAyB,EAAA;;;;;;cAEnB,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC;cAC1C,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC;cAErC,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,0BAAA,MAAA,CAA0B,KAAK,CAAE,CAAC;cAC9D,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC;cAAA,SAAA,CAAA,IAAA;cAI5B,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA;gBAAK,MAAM,EAAE,oBAAoB,CAAC;cAAM,CAAA,EAAK,WAAW,CAAE;cACjE,OAAO,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EACR,IAAI,CAAC,OAAO,CAAA,EACZ;gBAAE,UAAU,EAAE,MAAM,CAAC,OAAO,CAAC,MAAiB;cAAC,CAAE,CACrD;cAED,IAAI,OAAO,IAAI,KAAK,WAAW,IAAI,QAAQ,YAAY,IAAI,EAAE;gBAC3D,IAAI,GAAG,IAAI,QAAQ,CAAA,CAAE;gBACrB,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,YAAsB,CAAC;gBAC3D,IAAI,CAAC,MAAM,CAAC,EAAE,EAAE,QAAQ,CAAC;eAC1B,MAAM,IAAI,OAAO,QAAQ,KAAK,WAAW,IAAI,QAAQ,YAAY,QAAQ,EAAE;gBAC1E,IAAI,GAAG,QAAQ;gBACf,IAAI,CAAC,MAAM,CAAC,cAAc,EAAE,OAAO,CAAC,YAAsB,CAAC;eAC5D,MAAM;gBACL,IAAI,GAAG,QAAQ;gBACf,OAAO,CAAC,eAAe,CAAC,cAAA,MAAA,CAAc,OAAO,CAAC,YAAY,CAAE;gBAC5D,OAAO,CAAC,cAAc,CAAC,GAAG,OAAO,CAAC,WAAqB;;cACxD,SAAA,CAAA,IAAA;cAEW,OAAM,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAA,CAAE,EAAE;gBAC3C,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,IAAgB;gBACtB,OAAO,EAAP;eACD,CAAC;YAAA;cAJI,GAAG,GAAA,SAAA,CAAA,IAAA;cAAA,KAML,GAAG,CAAC,EAAE;gBAAA,SAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WACD;gBACL,IAAI,EAAE;kBAAE,IAAI,EAAE;gBAAS,CAAE;gBACzB,KAAK,EAAE;eACR;YAAA;cAAA,SAAA,CAAA,IAAA;cAEa,OAAM,GAAG,CAAC,IAAI,CAAA,CAAE;YAAA;cAAxB,KAAK,GAAA,SAAA,CAAA,IAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WACJ;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAL;cAAK,CAAE;YAAA;cAAA,SAAA,CAAA,IAAA;cAAA;YAAA;cAAA,SAAA,CAAA,IAAA;cAAA,SAAA,CAAA,EAAA,GAAA,SAAA;cAAA,KAG1B,cAAc,CAAA,SAAA,CAAA,EAAM,CAAC;gBAAA,SAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,SAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,SAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,SAAA,CAAA,IAAA;UAAA;QAAA,GAAA,QAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;;;AAKG;EALH;IAAA,GAAA;IAAA,KAAA,EAMM,SAAA,sBACJ,IAAY,EAAA;;;;;;;cAYN,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;cAAA,SAAA,CAAA,IAAA;cAEvB,OAAM,IAAI,CACrB,IAAI,CAAC,KAAK,KAAA,MAAA,CACP,IAAI,CAAC,GAAG,0BAAA,MAAA,CAAuB,KAAK,GACvC,CAAA,CAAE,EACF;gBAAE,OAAO,EAAE,IAAI,CAAC;cAAO,CAAE,CAC1B;YAAA;cALK,IAAI,GAAA,SAAA,CAAA,IAAA;cAOJ,GAAG,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;cAElC,KAAK,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC;cAAA,IAEtC,KAAK;gBAAA,SAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,MACF,IAAI,YAAY,CAAC,0BAA0B,CAAC;YAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAG7C;gBAAE,IAAI,EAAE;kBAAE,SAAS,EAAE,GAAG,CAAC,QAAQ,CAAA,CAAE;kBAAE,IAAI,EAAJ,IAAI;kBAAE,KAAK,EAAL;gBAAK,CAAE;gBAAE,KAAK,EAAE;cAAI,CAAE;YAAA;cAAA,SAAA,CAAA,IAAA;cAAA,SAAA,CAAA,EAAA,GAAA,SAAA;cAAA,KAEpE,cAAc,CAAA,SAAA,CAAA,EAAM,CAAC;gBAAA,SAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,SAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,SAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,SAAA,CAAA,IAAA;UAAA;QAAA,GAAA,QAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;;;AAKG;EALH;IAAA,GAAA;IAAA,KAAA,EAMM,SAAA,OACJ,IAAY,EACZ,QAUU,EACV,WAAyB,EAAA;;;;;gDAWlB,IAAI,CAAC,cAAc,CAAC,KAAK,EAAE,IAAI,EAAE,QAAQ,EAAE,WAAW,CAAC;YAAA;YAAA;cAAA,OAAA,SAAA,CAAA,IAAA;UAAA;QAAA,GAAA,QAAA;MAAA,CAC/D,EAAA;IAAA;IAED;;;;;AAKG;EALH;IAAA,GAAA;IAAA,KAAA,EAMM,SAAA,KACJ,QAAgB,EAChB,MAAc,EAAA;;;;;;;;cAYC,OAAM,IAAI,CACrB,IAAI,CAAC,KAAK,KAAA,MAAA,CACP,IAAI,CAAC,GAAG,mBACX;gBAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBAAE,SAAS,EAAE,QAAQ;gBAAE,cAAc,EAAE;cAAM,CAAE,EACxE;gBAAE,OAAO,EAAE,IAAI,CAAC;cAAO,CAAE,CAC1B;YAAA;cALK,IAAI,GAAA,SAAA,CAAA,IAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAMH;gBAAE,IAAI,EAAJ,IAAI;gBAAE,KAAK,EAAE;cAAI,CAAE;YAAA;cAAA,SAAA,CAAA,IAAA;cAAA,SAAA,CAAA,EAAA,GAAA,SAAA;cAAA,KAExB,cAAc,CAAA,SAAA,CAAA,EAAM,CAAC;gBAAA,SAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,SAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,SAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,SAAA,CAAA,IAAA;UAAA;QAAA,GAAA,QAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;;;AAKG;EALH;IAAA,GAAA;IAAA,KAAA,EAMM,SAAA,KACJ,QAAgB,EAChB,MAAc,EAAA;;;;;;;;cAYC,OAAM,IAAI,CACrB,IAAI,CAAC,KAAK,KAAA,MAAA,CACP,IAAI,CAAC,GAAG,mBACX;gBAAE,QAAQ,EAAE,IAAI,CAAC,QAAQ;gBAAE,SAAS,EAAE,QAAQ;gBAAE,cAAc,EAAE;cAAM,CAAE,EACxE;gBAAE,OAAO,EAAE,IAAI,CAAC;cAAO,CAAE,CAC1B;YAAA;cALK,IAAI,GAAA,SAAA,CAAA,IAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAMH;gBAAE,IAAI,EAAE;kBAAE,IAAI,EAAE,IAAI,CAAC;gBAAG,CAAE;gBAAE,KAAK,EAAE;cAAI,CAAE;YAAA;cAAA,SAAA,CAAA,IAAA;cAAA,SAAA,CAAA,EAAA,GAAA,SAAA;cAAA,KAE5C,cAAc,CAAA,SAAA,CAAA,EAAM,CAAC;gBAAA,SAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,SAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,SAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,SAAA,CAAA,IAAA;UAAA;QAAA,GAAA,QAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;;;;;AAOG;EAPH;IAAA,GAAA;IAAA,KAAA,EAQM,SAAA,gBACJ,IAAY,EACZ,SAAiB,EACjB,OAAuE,EAAA;;;;;;;cAYjE,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;cAAA,SAAA,CAAA,IAAA;cAEzB,OAAM,IAAI,CACnB,IAAI,CAAC,KAAK,KAAA,MAAA,CACP,IAAI,CAAC,GAAG,mBAAA,MAAA,CAAgB,KAAK,GAAE,MAAA,CAAA,MAAA,CAAA;gBAChC,SAAS,EAAT;cAAS,CAAA,EAAM,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,SAAS,IAAG;gBAAE,SAAS,EAAE,OAAO,CAAC;cAAS,CAAE,GAAG,CAAA,CAAG,CAAA,EAC5E;gBAAE,OAAO,EAAE,IAAI,CAAC;cAAO,CAAE,CAC1B;YAAA;cALG,IAAI,GAAA,SAAA,CAAA,IAAA;cAMF,kBAAkB,GAAG,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,QAAQ,iBAAA,MAAA,CAC3B,OAAO,CAAC,QAAQ,KAAK,IAAI,GAAG,EAAE,GAAG,OAAO,CAAC,QAAQ,IAC9D,EAAE;cACA,SAAS,GAAG,SAAS,IAAA,MAAA,CAAI,IAAI,CAAC,GAAG,EAAA,MAAA,CAAG,IAAI,CAAC,SAAS,EAAA,MAAA,CAAG,kBAAkB,CAAE,CAAC;cAChF,IAAI,GAAG;gBAAE,SAAS,EAAT;cAAS,CAAE;cAAA,OAAA,SAAA,CAAA,MAAA,WACb;gBAAE,IAAI,EAAJ,IAAI;gBAAE,KAAK,EAAE;cAAI,CAAE;YAAA;cAAA,SAAA,CAAA,IAAA;cAAA,SAAA,CAAA,EAAA,GAAA,SAAA;cAAA,KAExB,cAAc,CAAA,SAAA,CAAA,EAAM,CAAC;gBAAA,SAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,SAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,SAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,SAAA,CAAA,IAAA;UAAA;QAAA,GAAA,QAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;;;;AAMG;EANH;IAAA,GAAA;IAAA,KAAA,EAOM,SAAA,iBACJ,KAAe,EACf,SAAiB,EACjB,OAAwC,EAAA;;;;;;;;;cAYzB,OAAM,IAAI,CACrB,IAAI,CAAC,KAAK,KAAA,MAAA,CACP,IAAI,CAAC,GAAG,mBAAA,MAAA,CAAgB,IAAI,CAAC,QAAQ,GACxC;gBAAE,SAAS,EAAT,SAAS;gBAAE,KAAK,EAAL;cAAK,CAAE,EACpB;gBAAE,OAAO,EAAE,IAAI,CAAC;cAAO,CAAE,CAC1B;YAAA;cALK,IAAI,GAAA,SAAA,CAAA,IAAA;cAOJ,kBAAkB,GAAG,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,QAAQ,iBAAA,MAAA,CAC3B,OAAO,CAAC,QAAQ,KAAK,IAAI,GAAG,EAAE,GAAG,OAAO,CAAC,QAAQ,IAC9D,EAAE;cAAA,OAAA,SAAA,CAAA,MAAA,WACC;gBACL,IAAI,EAAE,IAAI,CAAC,GAAG,CAAC,UAAC,KAA4B;kBAAA,OAAK,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAC5C,KAAK,CAAA,EAAA;oBACR,SAAS,EAAE,KAAK,CAAC,SAAS,GACtB,SAAS,IAAA,MAAA,CAAI,KAAI,CAAC,GAAG,EAAA,MAAA,CAAG,KAAK,CAAC,SAAS,EAAA,MAAA,CAAG,kBAAkB,CAAE,CAAC,GAC/D;kBAAI,CAAA,CAAA;gBAAA,CACR,CAAC;gBACH,KAAK,EAAE;eACR;YAAA;cAAA,SAAA,CAAA,IAAA;cAAA,SAAA,CAAA,EAAA,GAAA,SAAA;cAAA,KAEG,cAAc,CAAA,SAAA,CAAA,EAAM,CAAC;gBAAA,SAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,SAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,SAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,SAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,SAAA,CAAA,IAAA;UAAA;QAAA,GAAA,QAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;;;AAKG;EALH;IAAA,GAAA;IAAA,KAAA,EAMM,SAAA,SACJ,IAAY,EACZ,OAA0C,EAAA;;;;;;cAWpC,mBAAmB,GAAG,QAAO,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,SAAS,CAAA,KAAK,WAAW;cAC/D,UAAU,GAAG,mBAAmB,GAAG,4BAA4B,GAAG,QAAQ;cAC1E,mBAAmB,GAAG,IAAI,CAAC,0BAA0B,CAAC,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,SAAS,KAAI,CAAA,CAAE,CAAC;cAC/E,WAAW,GAAG,mBAAmB,OAAA,MAAA,CAAO,mBAAmB,IAAK,EAAE;cAAA,UAAA,CAAA,IAAA;cAGhE,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;cAAA,UAAA,CAAA,IAAA;cAC1B,OAAM,GAAG,CAAC,IAAI,CAAC,KAAK,KAAA,MAAA,CAAK,IAAI,CAAC,GAAG,OAAA,MAAA,CAAI,UAAU,OAAA,MAAA,CAAI,KAAK,EAAA,MAAA,CAAG,WAAW,GAAI;gBACpF,OAAO,EAAE,IAAI,CAAC,OAAO;gBACrB,aAAa,EAAE;eAChB,CAAC;YAAA;cAHI,GAAG,GAAA,UAAA,CAAA,IAAA;cAAA,UAAA,CAAA,IAAA;cAII,OAAM,GAAG,CAAC,IAAI,CAAA,CAAE;YAAA;cAAvB,IAAI,GAAA,UAAA,CAAA,IAAA;cAAA,OAAA,UAAA,CAAA,MAAA,WACH;gBAAE,IAAI,EAAJ,IAAI;gBAAE,KAAK,EAAE;cAAI,CAAE;YAAA;cAAA,UAAA,CAAA,IAAA;cAAA,UAAA,CAAA,EAAA,GAAA,UAAA;cAAA,KAExB,cAAc,CAAA,UAAA,CAAA,EAAM,CAAC;gBAAA,UAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,UAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,UAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,UAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,UAAA,CAAA,IAAA;UAAA;QAAA,GAAA,SAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;;;;;AAOG;EAPH;IAAA,GAAA;IAAA,KAAA,EAQA,SAAA,aACE,IAAY,EACZ,OAAuE,EAAA;MAEvE,IAAM,KAAK,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC;MACtC,IAAM,YAAY,GAAG,EAAE;MAEvB,IAAM,kBAAkB,GAAG,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,QAAQ,gBAAA,MAAA,CAC5B,OAAO,CAAC,QAAQ,KAAK,IAAI,GAAG,EAAE,GAAG,OAAO,CAAC,QAAQ,IAC7D,EAAE;MAEN,IAAI,kBAAkB,KAAK,EAAE,EAAE;QAC7B,YAAY,CAAC,IAAI,CAAC,kBAAkB,CAAC;MACtC;MAED,IAAM,mBAAmB,GAAG,QAAO,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,SAAS,CAAA,KAAK,WAAW;MACrE,IAAM,UAAU,GAAG,mBAAmB,GAAG,cAAc,GAAG,QAAQ;MAClE,IAAM,mBAAmB,GAAG,IAAI,CAAC,0BAA0B,CAAC,CAAA,OAAO,KAAA,IAAA,IAAP,OAAO,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAP,OAAO,CAAE,SAAS,KAAI,CAAA,CAAE,CAAC;MAErF,IAAI,mBAAmB,KAAK,EAAE,EAAE;QAC9B,YAAY,CAAC,IAAI,CAAC,mBAAmB,CAAC;MACvC;MAED,IAAI,WAAW,GAAG,YAAY,CAAC,IAAI,CAAC,GAAG,CAAC;MACxC,IAAI,WAAW,KAAK,EAAE,EAAE;QACtB,WAAW,OAAA,MAAA,CAAO,WAAW,CAAE;MAChC;MAED,OAAO;QACL,IAAI,EAAE;UAAE,SAAS,EAAE,SAAS,IAAA,MAAA,CAAI,IAAI,CAAC,GAAG,OAAA,MAAA,CAAI,UAAU,cAAA,MAAA,CAAW,KAAK,EAAA,MAAA,CAAG,WAAW,CAAE;QAAC;OACxF;IACH;IAEA;;;;AAIG;EAJH;IAAA,GAAA;IAAA,KAAA,EAKM,SAAA,OACJ,KAAe,EAAA;;;;;;;;cAYA,OAAM,OAAM,CACvB,IAAI,CAAC,KAAK,KAAA,MAAA,CACP,IAAI,CAAC,GAAG,cAAA,MAAA,CAAW,IAAI,CAAC,QAAQ,GACnC;gBAAE,QAAQ,EAAE;cAAK,CAAE,EACnB;gBAAE,OAAO,EAAE,IAAI,CAAC;cAAO,CAAE,CAC1B;YAAA;cALK,IAAI,GAAA,UAAA,CAAA,IAAA;cAAA,OAAA,UAAA,CAAA,MAAA,WAMH;gBAAE,IAAI,EAAJ,IAAI;gBAAE,KAAK,EAAE;cAAI,CAAE;YAAA;cAAA,UAAA,CAAA,IAAA;cAAA,UAAA,CAAA,EAAA,GAAA,UAAA;cAAA,KAExB,cAAc,CAAA,UAAA,CAAA,EAAM,CAAC;gBAAA,UAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,UAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,UAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,UAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,UAAA,CAAA,IAAA;UAAA;QAAA,GAAA,SAAA;MAAA,CAKjC,EAAA;IAAA;IAED;;;AAGG;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;;;;AAIG;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;IAEA;;;AAGG;EAHH;IAAA,GAAA;IAAA,KAAA,EAIM,SAAA,KACJ,IAAa,EACb,OAAuB,EACvB,UAA4B,EAAA;;;;;;;cAYpB,IAAI,GAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,CAAA,EAAQ,sBAAsB,CAAA,EAAK,OAAO,CAAA,EAAA;gBAAE,MAAM,EAAE,IAAI,IAAI;cAAE,CAAA,CAAE;cAAA,UAAA,CAAA,IAAA;cAC7D,OAAM,IAAI,CACrB,IAAI,CAAC,KAAK,KAAA,MAAA,CACP,IAAI,CAAC,GAAG,mBAAA,MAAA,CAAgB,IAAI,CAAC,QAAQ,GACxC,IAAI,EACJ;gBAAE,OAAO,EAAE,IAAI,CAAC;cAAO,CAAE,EACzB,UAAU,CACX;YAAA;cANK,IAAI,GAAA,UAAA,CAAA,IAAA;cAAA,OAAA,UAAA,CAAA,MAAA,WAOH;gBAAE,IAAI,EAAJ,IAAI;gBAAE,KAAK,EAAE;cAAI,CAAE;YAAA;cAAA,UAAA,CAAA,IAAA;cAAA,UAAA,CAAA,EAAA,GAAA,UAAA;cAAA,KAExB,cAAc,CAAA,UAAA,CAAA,EAAM,CAAC;gBAAA,UAAA,CAAA,IAAA;gBAAA;cAAA;cAAA,OAAA,UAAA,CAAA,MAAA,WAChB;gBAAE,IAAI,EAAE,IAAI;gBAAE,KAAK,EAAA,UAAA,CAAA;cAAA,CAAE;YAAA;cAAA,MAAA,UAAA,CAAA,EAAA;YAAA;YAAA;cAAA,OAAA,UAAA,CAAA,IAAA;UAAA;QAAA,GAAA,SAAA;MAAA,CAKjC,EAAA;;EAAA;IAAA,GAAA;IAAA,KAAA,EAEO,SAAA,cAAc,IAAY,EAAA;MAChC,UAAA,MAAA,CAAU,IAAI,CAAC,QAAQ,OAAA,MAAA,CAAI,IAAI;IACjC;EAAC;IAAA,GAAA;IAAA,KAAA,EAEO,SAAA,oBAAoB,IAAY,EAAA;MACtC,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;IAC1D;EAAC;IAAA,GAAA;IAAA,KAAA,EAEO,SAAA,2BAA2B,SAA2B,EAAA;MAC5D,IAAM,MAAM,GAAG,EAAE;MACjB,IAAI,SAAS,CAAC,KAAK,EAAE;QACnB,MAAM,CAAC,IAAI,UAAA,MAAA,CAAU,SAAS,CAAC,KAAK,CAAE,CAAC;MACxC;MAED,IAAI,SAAS,CAAC,MAAM,EAAE;QACpB,MAAM,CAAC,IAAI,WAAA,MAAA,CAAW,SAAS,CAAC,MAAM,CAAE,CAAC;MAC1C;MAED,IAAI,SAAS,CAAC,MAAM,EAAE;QACpB,MAAM,CAAC,IAAI,WAAA,MAAA,CAAW,SAAS,CAAC,MAAM,CAAE,CAAC;MAC1C;MAED,IAAI,SAAS,CAAC,MAAM,EAAE;QACpB,MAAM,CAAC,IAAI,WAAA,MAAA,CAAW,SAAS,CAAC,MAAM,CAAE,CAAC;MAC1C;MAED,IAAI,SAAS,CAAC,OAAO,EAAE;QACrB,MAAM,CAAC,IAAI,YAAA,MAAA,CAAY,SAAS,CAAC,OAAO,CAAE,CAAC;MAC5C;MAED,OAAO,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC;IACzB;EAAC;EAAA,OAAA,cAAA;AAAA;AAAA,SA5pBkB,cAAc,IAAA,OAAA","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { isStorageError, StorageError } from '../lib/errors';\nimport { get, post, remove } from '../lib/fetch';\nimport { resolveFetch } from '../lib/helpers';\nconst DEFAULT_SEARCH_OPTIONS = {\n    limit: 100,\n    offset: 0,\n    sortBy: {\n        column: 'name',\n        order: 'asc',\n    },\n};\nconst DEFAULT_FILE_OPTIONS = {\n    cacheControl: '3600',\n    contentType: 'text/plain;charset=UTF-8',\n    upsert: false,\n};\nexport default class StorageFileApi {\n    constructor(url, headers = {}, bucketId, fetch) {\n        this.url = url;\n        this.headers = headers;\n        this.bucketId = bucketId;\n        this.fetch = resolveFetch(fetch);\n    }\n    /**\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\n     *\n     * @param method HTTP method.\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let body;\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const cleanPath = this._removeEmptyFolders(path);\n                const _path = this._getFinalPath(cleanPath);\n                const res = yield this.fetch(`${this.url}/object/${_path}`, Object.assign({ method, body: body, headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Uploads a file to an existing bucket.\n     *\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    upload(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Upload a file with a token generated from `createSignedUploadUrl`.\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\n     * @param token The token generated from `createSignedUploadUrl`\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cleanPath = this._removeEmptyFolders(path);\n            const _path = this._getFinalPath(cleanPath);\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\n            url.searchParams.set('token', token);\n            try {\n                let body;\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\n                    body = new FormData();\n                    body.append('cacheControl', options.cacheControl);\n                    body.append('', fileBody);\n                }\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\n                    body = fileBody;\n                    body.append('cacheControl', options.cacheControl);\n                }\n                else {\n                    body = fileBody;\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\n                    headers['content-type'] = options.contentType;\n                }\n                const res = yield this.fetch(url.toString(), {\n                    method: 'PUT',\n                    body: body,\n                    headers,\n                });\n                if (res.ok) {\n                    return {\n                        data: { path: cleanPath },\n                        error: null,\n                    };\n                }\n                else {\n                    const error = yield res.json();\n                    return { data: null, error };\n                }\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed upload URL.\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\n     * They are valid for one minute.\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     */\n    createSignedUploadUrl(path) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                const data = yield post(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers: this.headers });\n                const url = new URL(this.url + data.url);\n                const token = url.searchParams.get('token');\n                if (!token) {\n                    throw new StorageError('No token returned by API');\n                }\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Replaces an existing file at the specified path with a new one.\n     *\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\n     * @param fileBody The body of the file to be stored in the bucket.\n     */\n    update(path, fileBody, fileOptions) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\n        });\n    }\n    /**\n     * Moves an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\n     */\n    move(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/move`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Copies an existing file to a new path in the same bucket.\n     *\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\n     */\n    copy(fromPath, toPath) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/copy`, { bucketId: this.bucketId, sourceKey: fromPath, destinationKey: toPath }, { headers: this.headers });\n                return { data: { path: data.Key }, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param path The file path, including the current file name. For example `folder/image.png`.\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    createSignedUrl(path, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                let _path = this._getFinalPath(path);\n                let data = yield post(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\n                data = { signedUrl };\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\n     *\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     */\n    createSignedUrls(paths, expiresIn, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield post(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n                    ? `&download=${options.download === true ? '' : options.download}`\n                    : '';\n                return {\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\n                            : null }))),\n                    error: null,\n                };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\n     *\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    download(path, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n            const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\n            const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n            const queryString = transformationQuery ? `?${transformationQuery}` : '';\n            try {\n                const _path = this._getFinalPath(path);\n                const res = yield get(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\n                    headers: this.headers,\n                    noResolveJson: true,\n                });\n                const data = yield res.blob();\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\n     *\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\n     * @param options.transform Transform the asset before serving it to the client.\n     */\n    getPublicUrl(path, options) {\n        const _path = this._getFinalPath(path);\n        const _queryString = [];\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\n            ? `download=${options.download === true ? '' : options.download}`\n            : '';\n        if (downloadQueryParam !== '') {\n            _queryString.push(downloadQueryParam);\n        }\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\n        if (transformationQuery !== '') {\n            _queryString.push(transformationQuery);\n        }\n        let queryString = _queryString.join('&');\n        if (queryString !== '') {\n            queryString = `?${queryString}`;\n        }\n        return {\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\n        };\n    }\n    /**\n     * Deletes files within the same bucket\n     *\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\n     */\n    remove(paths) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const data = yield remove(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Get file metadata\n     * @param id the file id to retrieve metadata\n     */\n    // async getMetadata(\n    //   id: string\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Update file metadata\n     * @param id the file id to update metadata\n     * @param meta the new file metadata\n     */\n    // async updateMetadata(\n    //   id: string,\n    //   meta: Metadata\n    // ): Promise<\n    //   | {\n    //       data: Metadata\n    //       error: null\n    //     }\n    //   | {\n    //       data: null\n    //       error: StorageError\n    //     }\n    // > {\n    //   try {\n    //     const data = await post(\n    //       this.fetch,\n    //       `${this.url}/metadata/${id}`,\n    //       { ...meta },\n    //       { headers: this.headers }\n    //     )\n    //     return { data, error: null }\n    //   } catch (error) {\n    //     if (isStorageError(error)) {\n    //       return { data: null, error }\n    //     }\n    //     throw error\n    //   }\n    // }\n    /**\n     * Lists all the files within a bucket.\n     * @param path The folder path.\n     */\n    list(path, options, parameters) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\n                const data = yield post(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\n                return { data, error: null };\n            }\n            catch (error) {\n                if (isStorageError(error)) {\n                    return { data: null, error };\n                }\n                throw error;\n            }\n        });\n    }\n    _getFinalPath(path) {\n        return `${this.bucketId}/${path}`;\n    }\n    _removeEmptyFolders(path) {\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\n    }\n    transformOptsToQueryString(transform) {\n        const params = [];\n        if (transform.width) {\n            params.push(`width=${transform.width}`);\n        }\n        if (transform.height) {\n            params.push(`height=${transform.height}`);\n        }\n        if (transform.resize) {\n            params.push(`resize=${transform.resize}`);\n        }\n        if (transform.format) {\n            params.push(`format=${transform.format}`);\n        }\n        if (transform.quality) {\n            params.push(`quality=${transform.quality}`);\n        }\n        return params.join('&');\n    }\n}\n//# sourceMappingURL=StorageFileApi.js.map"]},"metadata":{},"sourceType":"module"}