{"ast":null,"code":"import _toConsumableArray from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n  REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nvar RealtimePresence = /*#__PURE__*/function () {\n  /**\n   * Initializes the Presence.\n   *\n   * @param channel - The RealtimeChannel\n   * @param opts - The options,\n   *        for example `{events: {state: 'state', diff: 'diff'}}`\n   */\n  function RealtimePresence(channel, opts) {\n    var _this = this;\n    _classCallCheck(this, RealtimePresence);\n    this.channel = channel;\n    this.state = {};\n    this.pendingDiffs = [];\n    this.joinRef = null;\n    this.caller = {\n      onJoin: function onJoin() {},\n      onLeave: function onLeave() {},\n      onSync: function onSync() {}\n    };\n    var events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n      state: 'presence_state',\n      diff: 'presence_diff'\n    };\n    this.channel._on(events.state, {}, function (newState) {\n      var _this$caller = _this.caller,\n        onJoin = _this$caller.onJoin,\n        onLeave = _this$caller.onLeave,\n        onSync = _this$caller.onSync;\n      _this.joinRef = _this.channel._joinRef();\n      _this.state = RealtimePresence.syncState(_this.state, newState, onJoin, onLeave);\n      _this.pendingDiffs.forEach(function (diff) {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n      });\n      _this.pendingDiffs = [];\n      onSync();\n    });\n    this.channel._on(events.diff, {}, function (diff) {\n      var _this$caller2 = _this.caller,\n        onJoin = _this$caller2.onJoin,\n        onLeave = _this$caller2.onLeave,\n        onSync = _this$caller2.onSync;\n      if (_this.inPendingSyncState()) {\n        _this.pendingDiffs.push(diff);\n      } else {\n        _this.state = RealtimePresence.syncDiff(_this.state, diff, onJoin, onLeave);\n        onSync();\n      }\n    });\n    this.onJoin(function (key, currentPresences, newPresences) {\n      _this.channel._trigger('presence', {\n        event: 'join',\n        key: key,\n        currentPresences: currentPresences,\n        newPresences: newPresences\n      });\n    });\n    this.onLeave(function (key, currentPresences, leftPresences) {\n      _this.channel._trigger('presence', {\n        event: 'leave',\n        key: key,\n        currentPresences: currentPresences,\n        leftPresences: leftPresences\n      });\n    });\n    this.onSync(function () {\n      _this.channel._trigger('presence', {\n        event: 'sync'\n      });\n    });\n  }\n  /**\n   * Used to sync the list of presences on the server with the\n   * client's state.\n   *\n   * An optional `onJoin` and `onLeave` callback can be provided to\n   * react to changes in the client's local presences across\n   * disconnects and reconnects with the server.\n   *\n   * @internal\n   */\n  _createClass(RealtimePresence, [{\n    key: \"onJoin\",\n    value: /** @internal */\n    function onJoin(callback) {\n      this.caller.onJoin = callback;\n    }\n    /** @internal */\n  }, {\n    key: \"onLeave\",\n    value: function onLeave(callback) {\n      this.caller.onLeave = callback;\n    }\n    /** @internal */\n  }, {\n    key: \"onSync\",\n    value: function onSync(callback) {\n      this.caller.onSync = callback;\n    }\n    /** @internal */\n  }, {\n    key: \"inPendingSyncState\",\n    value: function inPendingSyncState() {\n      return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n  }], [{\n    key: \"syncState\",\n    value: function syncState(currentState, newState, onJoin, onLeave) {\n      var state = this.cloneDeep(currentState);\n      var transformedState = this.transformState(newState);\n      var joins = {};\n      var leaves = {};\n      this.map(state, function (key, presences) {\n        if (!transformedState[key]) {\n          leaves[key] = presences;\n        }\n      });\n      this.map(transformedState, function (key, newPresences) {\n        var currentPresences = state[key];\n        if (currentPresences) {\n          var newPresenceRefs = newPresences.map(function (m) {\n            return m.presence_ref;\n          });\n          var curPresenceRefs = currentPresences.map(function (m) {\n            return m.presence_ref;\n          });\n          var joinedPresences = newPresences.filter(function (m) {\n            return curPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          var leftPresences = currentPresences.filter(function (m) {\n            return newPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          if (joinedPresences.length > 0) {\n            joins[key] = joinedPresences;\n          }\n          if (leftPresences.length > 0) {\n            leaves[key] = leftPresences;\n          }\n        } else {\n          joins[key] = newPresences;\n        }\n      });\n      return this.syncDiff(state, {\n        joins: joins,\n        leaves: leaves\n      }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n  }, {\n    key: \"syncDiff\",\n    value: function syncDiff(state, diff, onJoin, onLeave) {\n      var _this2 = this;\n      var _joins$leaves = {\n          joins: this.transformState(diff.joins),\n          leaves: this.transformState(diff.leaves)\n        },\n        joins = _joins$leaves.joins,\n        leaves = _joins$leaves.leaves;\n      if (!onJoin) {\n        onJoin = function onJoin() {};\n      }\n      if (!onLeave) {\n        onLeave = function onLeave() {};\n      }\n      this.map(joins, function (key, newPresences) {\n        var _a;\n        var currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n        state[key] = _this2.cloneDeep(newPresences);\n        if (currentPresences.length > 0) {\n          var _state$key;\n          var joinedPresenceRefs = state[key].map(function (m) {\n            return m.presence_ref;\n          });\n          var curPresences = currentPresences.filter(function (m) {\n            return joinedPresenceRefs.indexOf(m.presence_ref) < 0;\n          });\n          (_state$key = state[key]).unshift.apply(_state$key, _toConsumableArray(curPresences));\n        }\n        onJoin(key, currentPresences, newPresences);\n      });\n      this.map(leaves, function (key, leftPresences) {\n        var currentPresences = state[key];\n        if (!currentPresences) return;\n        var presenceRefsToRemove = leftPresences.map(function (m) {\n          return m.presence_ref;\n        });\n        currentPresences = currentPresences.filter(function (m) {\n          return presenceRefsToRemove.indexOf(m.presence_ref) < 0;\n        });\n        state[key] = currentPresences;\n        onLeave(key, currentPresences, leftPresences);\n        if (currentPresences.length === 0) delete state[key];\n      });\n      return state;\n    }\n    /** @internal */\n  }, {\n    key: \"map\",\n    value: function map(obj, func) {\n      return Object.getOwnPropertyNames(obj).map(function (key) {\n        return func(key, obj[key]);\n      });\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n  }, {\n    key: \"transformState\",\n    value: function transformState(state) {\n      state = this.cloneDeep(state);\n      return Object.getOwnPropertyNames(state).reduce(function (newState, key) {\n        var presences = state[key];\n        if ('metas' in presences) {\n          newState[key] = presences.metas.map(function (presence) {\n            presence['presence_ref'] = presence['phx_ref'];\n            delete presence['phx_ref'];\n            delete presence['phx_ref_prev'];\n            return presence;\n          });\n        } else {\n          newState[key] = presences;\n        }\n        return newState;\n      }, {});\n    }\n    /** @internal */\n  }, {\n    key: \"cloneDeep\",\n    value: function cloneDeep(obj) {\n      return JSON.parse(JSON.stringify(obj));\n    }\n  }]);\n  return RealtimePresence;\n}();\nexport { RealtimePresence as default };","map":{"version":3,"sources":["../../src/RealtimePresence.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["/*\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\n*/\nexport var REALTIME_PRESENCE_LISTEN_EVENTS;\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\nexport default class RealtimePresence {\n    /**\n     * Initializes the Presence.\n     *\n     * @param channel - The RealtimeChannel\n     * @param opts - The options,\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\n     */\n    constructor(channel, opts) {\n        this.channel = channel;\n        this.state = {};\n        this.pendingDiffs = [];\n        this.joinRef = null;\n        this.caller = {\n            onJoin: () => { },\n            onLeave: () => { },\n            onSync: () => { },\n        };\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\n            state: 'presence_state',\n            diff: 'presence_diff',\n        };\n        this.channel._on(events.state, {}, (newState) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            this.joinRef = this.channel._joinRef();\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\n            this.pendingDiffs.forEach((diff) => {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n            });\n            this.pendingDiffs = [];\n            onSync();\n        });\n        this.channel._on(events.diff, {}, (diff) => {\n            const { onJoin, onLeave, onSync } = this.caller;\n            if (this.inPendingSyncState()) {\n                this.pendingDiffs.push(diff);\n            }\n            else {\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\n                onSync();\n            }\n        });\n        this.onJoin((key, currentPresences, newPresences) => {\n            this.channel._trigger('presence', {\n                event: 'join',\n                key,\n                currentPresences,\n                newPresences,\n            });\n        });\n        this.onLeave((key, currentPresences, leftPresences) => {\n            this.channel._trigger('presence', {\n                event: 'leave',\n                key,\n                currentPresences,\n                leftPresences,\n            });\n        });\n        this.onSync(() => {\n            this.channel._trigger('presence', { event: 'sync' });\n        });\n    }\n    /**\n     * Used to sync the list of presences on the server with the\n     * client's state.\n     *\n     * An optional `onJoin` and `onLeave` callback can be provided to\n     * react to changes in the client's local presences across\n     * disconnects and reconnects with the server.\n     *\n     * @internal\n     */\n    static syncState(currentState, newState, onJoin, onLeave) {\n        const state = this.cloneDeep(currentState);\n        const transformedState = this.transformState(newState);\n        const joins = {};\n        const leaves = {};\n        this.map(state, (key, presences) => {\n            if (!transformedState[key]) {\n                leaves[key] = presences;\n            }\n        });\n        this.map(transformedState, (key, newPresences) => {\n            const currentPresences = state[key];\n            if (currentPresences) {\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\n                if (joinedPresences.length > 0) {\n                    joins[key] = joinedPresences;\n                }\n                if (leftPresences.length > 0) {\n                    leaves[key] = leftPresences;\n                }\n            }\n            else {\n                joins[key] = newPresences;\n            }\n        });\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\n    }\n    /**\n     * Used to sync a diff of presence join and leave events from the\n     * server, as they happen.\n     *\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\n     * `onLeave` callbacks to react to a user joining or leaving from a\n     * device.\n     *\n     * @internal\n     */\n    static syncDiff(state, diff, onJoin, onLeave) {\n        const { joins, leaves } = {\n            joins: this.transformState(diff.joins),\n            leaves: this.transformState(diff.leaves),\n        };\n        if (!onJoin) {\n            onJoin = () => { };\n        }\n        if (!onLeave) {\n            onLeave = () => { };\n        }\n        this.map(joins, (key, newPresences) => {\n            var _a;\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\n            state[key] = this.cloneDeep(newPresences);\n            if (currentPresences.length > 0) {\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\n                state[key].unshift(...curPresences);\n            }\n            onJoin(key, currentPresences, newPresences);\n        });\n        this.map(leaves, (key, leftPresences) => {\n            let currentPresences = state[key];\n            if (!currentPresences)\n                return;\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\n            state[key] = currentPresences;\n            onLeave(key, currentPresences, leftPresences);\n            if (currentPresences.length === 0)\n                delete state[key];\n        });\n        return state;\n    }\n    /** @internal */\n    static map(obj, func) {\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\n    }\n    /**\n     * Remove 'metas' key\n     * Change 'phx_ref' to 'presence_ref'\n     * Remove 'phx_ref' and 'phx_ref_prev'\n     *\n     * @example\n     * // returns {\n     *  abc123: [\n     *    { presence_ref: '2', user_id: 1 },\n     *    { presence_ref: '3', user_id: 2 }\n     *  ]\n     * }\n     * RealtimePresence.transformState({\n     *  abc123: {\n     *    metas: [\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\n     *      { phx_ref: '3', user_id: 2 }\n     *    ]\n     *  }\n     * })\n     *\n     * @internal\n     */\n    static transformState(state) {\n        state = this.cloneDeep(state);\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\n            const presences = state[key];\n            if ('metas' in presences) {\n                newState[key] = presences.metas.map((presence) => {\n                    presence['presence_ref'] = presence['phx_ref'];\n                    delete presence['phx_ref'];\n                    delete presence['phx_ref_prev'];\n                    return presence;\n                });\n            }\n            else {\n                newState[key] = presences;\n            }\n            return newState;\n        }, {});\n    }\n    /** @internal */\n    static cloneDeep(obj) {\n        return JSON.parse(JSON.stringify(obj));\n    }\n    /** @internal */\n    onJoin(callback) {\n        this.caller.onJoin = callback;\n    }\n    /** @internal */\n    onLeave(callback) {\n        this.caller.onLeave = callback;\n    }\n    /** @internal */\n    onSync(callback) {\n        this.caller.onSync = callback;\n    }\n    /** @internal */\n    inPendingSyncState() {\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\n    }\n}\n//# sourceMappingURL=RealtimePresence.js.map"]},"metadata":{},"sourceType":"module"}