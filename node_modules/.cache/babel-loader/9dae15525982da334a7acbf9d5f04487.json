{"ast":null,"code":"/** \n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports[\"default\"] = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      (0, _defineProperty2[\"default\"])(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nvar getFilterValueForColumns = function getFilterValueForColumns(filterValue, columnsMap) {\n  return (filterValue || []).map(function (filterValueObject) {\n    if (filterValueObject) {\n      var column = columnsMap[filterValueObject.name];\n      if (column) {\n        if (column.type && !filterValueObject.type) {\n          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {\n            type: column.filterType || column.type\n          });\n        }\n        if (typeof column.getFilterValue == 'function') {\n          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {\n            getFilterValue: column.getFilterValue\n          });\n        }\n        if (typeof column.filterName === 'string') {\n          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {\n            name: column.filterName\n          });\n        }\n      }\n    }\n    return filterValueObject;\n  });\n};\nvar _default = getFilterValueForColumns;\nexports[\"default\"] = _default;","map":{"version":3,"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","_defineProperty2","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","getFilterValueForColumns","filterValue","columnsMap","map","filterValueObject","column","name","type","filterType","getFilterValue","filterName","_default"],"sources":["/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@inovua/reactdatagrid-community/hooks/useDataSource/getFilterValueForColumns.js"],"sourcesContent":["/** \n * Copyright © INOVUA TRADING.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nvar getFilterValueForColumns = function getFilterValueForColumns(filterValue, columnsMap) {\n  return (filterValue || []).map(function (filterValueObject) {\n    if (filterValueObject) {\n      var column = columnsMap[filterValueObject.name];\n      if (column) {\n        if (column.type && !filterValueObject.type) {\n          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {\n            type: column.filterType || column.type\n          });\n        }\n        if (typeof column.getFilterValue == 'function') {\n          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {\n            getFilterValue: column.getFilterValue\n          });\n        }\n        if (typeof column.filterName === 'string') {\n          filterValueObject = _objectSpread(_objectSpread({}, filterValueObject), {}, {\n            name: column.filterName\n          });\n        }\n      }\n    }\n    return filterValueObject;\n  });\n};\nvar _default = getFilterValueForColumns;\nexports.default = _default;"],"mappings":"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"},"metadata":{},"sourceType":"script"}