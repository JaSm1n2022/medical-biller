{"ast":null,"code":"import _classCallCheck from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/Users/nargelmac/Documents/GitHub/medical-biller/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nvar Serializer = /*#__PURE__*/function () {\n  function Serializer() {\n    _classCallCheck(this, Serializer);\n    this.HEADER_LENGTH = 1;\n  }\n  _createClass(Serializer, [{\n    key: \"decode\",\n    value: function decode(rawPayload, callback) {\n      if (rawPayload.constructor === ArrayBuffer) {\n        return callback(this._binaryDecode(rawPayload));\n      }\n      if (typeof rawPayload === 'string') {\n        return callback(JSON.parse(rawPayload));\n      }\n      return callback({});\n    }\n  }, {\n    key: \"_binaryDecode\",\n    value: function _binaryDecode(buffer) {\n      var view = new DataView(buffer);\n      var decoder = new TextDecoder();\n      return this._decodeBroadcast(buffer, view, decoder);\n    }\n  }, {\n    key: \"_decodeBroadcast\",\n    value: function _decodeBroadcast(buffer, view, decoder) {\n      var topicSize = view.getUint8(1);\n      var eventSize = view.getUint8(2);\n      var offset = this.HEADER_LENGTH + 2;\n      var topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n      offset = offset + topicSize;\n      var event = decoder.decode(buffer.slice(offset, offset + eventSize));\n      offset = offset + eventSize;\n      var data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n      return {\n        ref: null,\n        topic: topic,\n        event: event,\n        payload: data\n      };\n    }\n  }]);\n  return Serializer;\n}();\nexport { Serializer as default };","map":{"version":3,"sources":["../../../src/lib/serializer.ts"],"names":[],"mappings":";;AAAA;AACA;AAAA,IAEqB,UAAU;EAA/B,SAAA,WAAA,EAAA;IAAA,eAAA,OAAA,UAAA;IACE,IAAA,CAAA,aAAa,GAAG,CAAC;EA4CnB;EAAC,YAAA,CAAA,UAAA;IAAA,GAAA;IAAA,KAAA,EA1CC,SAAA,OAAO,UAAgC,EAAE,QAAkB,EAAA;MACzD,IAAI,UAAU,CAAC,WAAW,KAAK,WAAW,EAAE;QAC1C,OAAO,QAAQ,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;MAChD;MAED,IAAI,OAAO,UAAU,KAAK,QAAQ,EAAE;QAClC,OAAO,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;MACxC;MAED,OAAO,QAAQ,CAAC,CAAA,CAAE,CAAC;IACrB;EAAC;IAAA,GAAA;IAAA,KAAA,EAEO,SAAA,cAAc,MAAmB,EAAA;MACvC,IAAM,IAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC;MACjC,IAAM,OAAO,GAAG,IAAI,WAAW,CAAA,CAAE;MAEjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,EAAE,OAAO,CAAC;IACrD;EAAC;IAAA,GAAA;IAAA,KAAA,EAEO,SAAA,iBACN,MAAmB,EACnB,IAAc,EACd,OAAoB,EAAA;MAOpB,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;MAClC,IAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;MAClC,IAAI,MAAM,GAAG,IAAI,CAAC,aAAa,GAAG,CAAC;MACnC,IAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC;MACtE,MAAM,GAAG,MAAM,GAAG,SAAS;MAC3B,IAAM,KAAK,GAAG,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,GAAG,SAAS,CAAC,CAAC;MACtE,MAAM,GAAG,MAAM,GAAG,SAAS;MAC3B,IAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CACrB,OAAO,CAAC,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CACxD;MAED,OAAO;QAAE,GAAG,EAAE,IAAI;QAAE,KAAK,EAAE,KAAK;QAAE,KAAK,EAAE,KAAK;QAAE,OAAO,EAAE;MAAI,CAAE;IACjE;EAAC;EAAA,OAAA,UAAA;AAAA;AAAA,SA5CkB,UAAU,IAAA,OAAA","sourceRoot":"","sourcesContent":["// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\nexport default class Serializer {\n    constructor() {\n        this.HEADER_LENGTH = 1;\n    }\n    decode(rawPayload, callback) {\n        if (rawPayload.constructor === ArrayBuffer) {\n            return callback(this._binaryDecode(rawPayload));\n        }\n        if (typeof rawPayload === 'string') {\n            return callback(JSON.parse(rawPayload));\n        }\n        return callback({});\n    }\n    _binaryDecode(buffer) {\n        const view = new DataView(buffer);\n        const decoder = new TextDecoder();\n        return this._decodeBroadcast(buffer, view, decoder);\n    }\n    _decodeBroadcast(buffer, view, decoder) {\n        const topicSize = view.getUint8(1);\n        const eventSize = view.getUint8(2);\n        let offset = this.HEADER_LENGTH + 2;\n        const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\n        offset = offset + topicSize;\n        const event = decoder.decode(buffer.slice(offset, offset + eventSize));\n        offset = offset + eventSize;\n        const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\n        return { ref: null, topic: topic, event: event, payload: data };\n    }\n}\n//# sourceMappingURL=serializer.js.map"]},"metadata":{},"sourceType":"module"}